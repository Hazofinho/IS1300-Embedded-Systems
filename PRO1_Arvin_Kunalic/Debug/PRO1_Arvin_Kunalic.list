
PRO1_Arvin_Kunalic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a68  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08005bf0  08005bf0  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fcc  08005fcc  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005fcc  08005fcc  00006fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fd4  08005fd4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fd4  08005fd4  00006fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005fdc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  20000010  08005fec  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  08005fec  000076fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014854  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8f  00000000  00000000  0001b894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  0001e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e12  00000000  00000000  0001fa40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f9f  00000000  00000000  00020852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017588  00000000  00000000  000497f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4e97  00000000  00000000  00060d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155c10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ac  00000000  00000000  00155c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0015a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bd8 	.word	0x08005bd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005bd8 	.word	0x08005bd8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <reset_595register>:
 *          system for new data.
 * @version 1.0
 * @param   None
 * @return  None
 *****************************************************************************/
void reset_595register(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(_595_Reset_GPIO_Port, _595_Reset_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c6:	f002 fa05 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_595_STCP_GPIO_Port, _595_STCP_Pin, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004d0:	480a      	ldr	r0, [pc, #40]	@ (80004fc <reset_595register+0x44>)
 80004d2:	f002 f9ff 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(_595_STCP_GPIO_Port, _595_STCP_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004dc:	4807      	ldr	r0, [pc, #28]	@ (80004fc <reset_595register+0x44>)
 80004de:	f002 f9f9 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80004e2:	200a      	movs	r0, #10
 80004e4:	f001 fefe 	bl	80022e4 <HAL_Delay>
    HAL_GPIO_WritePin(_595_Reset_GPIO_Port, _595_Reset_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004f2:	f002 f9ef 	bl	80028d4 <HAL_GPIO_WritePin>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	48000400 	.word	0x48000400

08000500 <buffer_to_SPI>:
 * @version 1.0
 * @param   None
 * @return  None
 * @note    Make sure 'shiftreg_buffer` is updated before calling this function.
 *****************************************************************************/
void buffer_to_SPI(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(_595_STCP_GPIO_Port, _595_STCP_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800050a:	480a      	ldr	r0, [pc, #40]	@ (8000534 <buffer_to_SPI+0x34>)
 800050c:	f002 f9e2 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, shiftreg_buffer, SHIFTREG_BUFFER_SIZE, HAL_MAX_DELAY);
 8000510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000514:	2203      	movs	r2, #3
 8000516:	4908      	ldr	r1, [pc, #32]	@ (8000538 <buffer_to_SPI+0x38>)
 8000518:	4808      	ldr	r0, [pc, #32]	@ (800053c <buffer_to_SPI+0x3c>)
 800051a:	f003 fdce 	bl	80040ba <HAL_SPI_Transmit>
    HAL_Delay(10);
 800051e:	200a      	movs	r0, #10
 8000520:	f001 fee0 	bl	80022e4 <HAL_Delay>
    HAL_GPIO_WritePin(_595_STCP_GPIO_Port, _595_STCP_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800052a:	4802      	ldr	r0, [pc, #8]	@ (8000534 <buffer_to_SPI+0x34>)
 800052c:	f002 f9d2 	bl	80028d4 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	48000400 	.word	0x48000400
 8000538:	2000002c 	.word	0x2000002c
 800053c:	200000d4 	.word	0x200000d4

08000540 <update_shiftreg_buffer>:
 * @param   uint32_t value, A 32-bit value representing the desired output
 *                          state for the shift registers.
 * @return  None
 * @see     buffer_to_SPI
 *****************************************************************************/
void update_shiftreg_buffer(uint32_t value) {
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    uint8_t u1_val = (value & 0xFF0000) >> 16;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	0c1b      	lsrs	r3, r3, #16
 800054c:	73fb      	strb	r3, [r7, #15]
    uint8_t u2_val = (value & 0x00FF00) >> 8;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	0a1b      	lsrs	r3, r3, #8
 8000552:	73bb      	strb	r3, [r7, #14]
    uint8_t u3_val = value & 0x0000FF;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	737b      	strb	r3, [r7, #13]

    shiftreg_buffer[U3] = u3_val;
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <update_shiftreg_buffer+0x38>)
 800055a:	7b7b      	ldrb	r3, [r7, #13]
 800055c:	7013      	strb	r3, [r2, #0]
    shiftreg_buffer[U2] = u2_val;
 800055e:	4a06      	ldr	r2, [pc, #24]	@ (8000578 <update_shiftreg_buffer+0x38>)
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	7053      	strb	r3, [r2, #1]
    shiftreg_buffer[U1] = u1_val;
 8000564:	4a04      	ldr	r2, [pc, #16]	@ (8000578 <update_shiftreg_buffer+0x38>)
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	7093      	strb	r3, [r2, #2]
}
 800056a:	bf00      	nop
 800056c:	3714      	adds	r7, #20
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	2000002c 	.word	0x2000002c

0800057c <set_pin>:
 * @version 1.2
 * @param   uint32_t pins, The bitmask of the pin/pins to set.
 * @return  None
 * @see     clear_pin, update_shiftreg_buffer, buffer_to_SPI
 *****************************************************************************/
void set_pin(uint32_t pins) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
    uint32_t bitmask = (shiftreg_buffer[U1] << 16)
 8000584:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <set_pin+0x38>)
 8000586:	789b      	ldrb	r3, [r3, #2]
 8000588:	041a      	lsls	r2, r3, #16
                     | (shiftreg_buffer[U2] << 8) 
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <set_pin+0x38>)
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	021b      	lsls	r3, r3, #8
 8000590:	4313      	orrs	r3, r2
                     | (shiftreg_buffer[U3]);
 8000592:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <set_pin+0x38>)
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	4313      	orrs	r3, r2
    uint32_t bitmask = (shiftreg_buffer[U1] << 16)
 8000598:	60fb      	str	r3, [r7, #12]

    uint32_t data = bitmask | pins;
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4313      	orrs	r3, r2
 80005a0:	60bb      	str	r3, [r7, #8]

    update_shiftreg_buffer(data);
 80005a2:	68b8      	ldr	r0, [r7, #8]
 80005a4:	f7ff ffcc 	bl	8000540 <update_shiftreg_buffer>
    buffer_to_SPI();
 80005a8:	f7ff ffaa 	bl	8000500 <buffer_to_SPI>
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	2000002c 	.word	0x2000002c

080005b8 <clear_pin>:
 * @version 1.2
 * @param   uint32_t pins, The bitmask of the pin/pins to clear.
 * @return  None
 * @see     set_pin, update_shiftreg_buffer, buffer_to_SPI
 *****************************************************************************/
void clear_pin(uint32_t pins) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
    uint32_t bitmask = (shiftreg_buffer[U1] << 16) 
 80005c0:	4b0c      	ldr	r3, [pc, #48]	@ (80005f4 <clear_pin+0x3c>)
 80005c2:	789b      	ldrb	r3, [r3, #2]
 80005c4:	041a      	lsls	r2, r3, #16
                     | (shiftreg_buffer[U2] << 8) 
 80005c6:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <clear_pin+0x3c>)
 80005c8:	785b      	ldrb	r3, [r3, #1]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	4313      	orrs	r3, r2
                     | (shiftreg_buffer[U3]);
 80005ce:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <clear_pin+0x3c>)
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	4313      	orrs	r3, r2
    uint32_t bitmask = (shiftreg_buffer[U1] << 16) 
 80005d4:	60fb      	str	r3, [r7, #12]

    uint32_t data = bitmask & ~pins;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	43db      	mvns	r3, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]

    update_shiftreg_buffer(data);
 80005e0:	68b8      	ldr	r0, [r7, #8]
 80005e2:	f7ff ffad 	bl	8000540 <update_shiftreg_buffer>
    buffer_to_SPI();
 80005e6:	f7ff ff8b 	bl	8000500 <buffer_to_SPI>
}
 80005ea:	bf00      	nop
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000002c 	.word	0x2000002c

080005f8 <toggle_pedestrian>:
 * @note    This function only works properly if the identifier is 1 or 2.
 *          If an invalid crosswalk is specified, the function will only toggle
 *          the Pedestrian2 lights.
 * @see     set_pin, clear_pin, HAL_TIM_PeriodElapsedCallback (ISR for timer 3)
 *****************************************************************************/
void toggle_pedestrian(uint8_t crosswalk) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    static uint32_t pin;
    static bool toggle = 0;

    (crosswalk == 1) ? (pin = PL1_Blue) : (pin = PL2_Blue);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d104      	bne.n	8000612 <toggle_pedestrian+0x1a>
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <toggle_pedestrian+0x68>)
 800060a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e003      	b.n	800061a <toggle_pedestrian+0x22>
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <toggle_pedestrian+0x68>)
 8000614:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000618:	601a      	str	r2, [r3, #0]

    (toggle) ? (clear_pin(pin)) : (set_pin(pin));
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <toggle_pedestrian+0x6c>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d005      	beq.n	800062e <toggle_pedestrian+0x36>
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <toggle_pedestrian+0x68>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffc6 	bl	80005b8 <clear_pin>
 800062c:	e004      	b.n	8000638 <toggle_pedestrian+0x40>
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <toggle_pedestrian+0x68>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffa2 	bl	800057c <set_pin>

    toggle = !toggle;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <toggle_pedestrian+0x6c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <toggle_pedestrian+0x6c>)
 8000654:	701a      	strb	r2, [r3, #0]
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000038 	.word	0x20000038
 8000664:	2000003c 	.word	0x2000003c

08000668 <go_pedestrian>:
 * @note    This function only works properly if the identifier is 1 or 2.
 *          If an invalid crosswalk is specified, the function simply returns
 *          without affect.
 * @see     toggle_pedestrian, stop_pedestrian, set_pin, clear_pin
 *****************************************************************************/
void go_pedestrian(uint8_t crosswalk) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
    static uint32_t pin_red, pin_green;

    if (crosswalk == 1) {
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d118      	bne.n	80006aa <go_pedestrian+0x42>
        pin_red = PL1_Red;
 8000678:	4b27      	ldr	r3, [pc, #156]	@ (8000718 <go_pedestrian+0xb0>)
 800067a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800067e:	601a      	str	r2, [r3, #0]
        pin_green = PL1_Green;
 8000680:	4b26      	ldr	r3, [pc, #152]	@ (800071c <go_pedestrian+0xb4>)
 8000682:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000686:	601a      	str	r2, [r3, #0]
        crosswalk1_green = 1;
 8000688:	4b25      	ldr	r3, [pc, #148]	@ (8000720 <go_pedestrian+0xb8>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
        crosswalk1_red = 0;
 800068e:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <go_pedestrian+0xbc>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
        draw_string(0, 0, "Pedestrians can    ");
 8000694:	4a24      	ldr	r2, [pc, #144]	@ (8000728 <go_pedestrian+0xc0>)
 8000696:	2100      	movs	r1, #0
 8000698:	2000      	movs	r0, #0
 800069a:	f000 ff4b 	bl	8001534 <draw_string>
        draw_string(0, 8, "     cross lane 1!");
 800069e:	4a23      	ldr	r2, [pc, #140]	@ (800072c <go_pedestrian+0xc4>)
 80006a0:	2108      	movs	r1, #8
 80006a2:	2000      	movs	r0, #0
 80006a4:	f000 ff46 	bl	8001534 <draw_string>
 80006a8:	e01a      	b.n	80006e0 <go_pedestrian+0x78>
    } else if (crosswalk == 2) {
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d12f      	bne.n	8000710 <go_pedestrian+0xa8>
        pin_red = PL2_Red;
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <go_pedestrian+0xb0>)
 80006b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006b6:	601a      	str	r2, [r3, #0]
        pin_green = PL2_Green;
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <go_pedestrian+0xb4>)
 80006ba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80006be:	601a      	str	r2, [r3, #0]
        crosswalk2_green = 1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <go_pedestrian+0xc8>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
        crosswalk2_red = 0;
 80006c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000734 <go_pedestrian+0xcc>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
        draw_string(0, 0, "Pedestrians can    ");
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <go_pedestrian+0xc0>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 ff2f 	bl	8001534 <draw_string>
        draw_string(0, 8, "     cross lane 2!");
 80006d6:	4a18      	ldr	r2, [pc, #96]	@ (8000738 <go_pedestrian+0xd0>)
 80006d8:	2108      	movs	r1, #8
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 ff2a 	bl	8001534 <draw_string>
    } else {
        return; // Invalid intersection
    }

    clear_pin(pin_red);
 80006e0:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <go_pedestrian+0xb0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ff67 	bl	80005b8 <clear_pin>
    set_pin(pin_green);
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <go_pedestrian+0xb4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ff44 	bl	800057c <set_pin>

    /* 
    *   If 'go_pedestrian' is called after a pedestrian button-press, make
    *   sure 'walking_Delay' time is met.
    */
    if (PL1_SW_HIT || PL2_SW_HIT) {
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <go_pedestrian+0xd4>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d104      	bne.n	8000708 <go_pedestrian+0xa0>
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <go_pedestrian+0xd8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d004      	beq.n	8000712 <go_pedestrian+0xaa>

    /* Start pedestrian_Delay timer making sure R1.3 is met */
    HAL_TIM_Base_Start_IT(&htim5); 
 8000708:	480e      	ldr	r0, [pc, #56]	@ (8000744 <go_pedestrian+0xdc>)
 800070a:	f004 f899 	bl	8004840 <HAL_TIM_Base_Start_IT>
 800070e:	e000      	b.n	8000712 <go_pedestrian+0xaa>
        return; // Invalid intersection
 8000710:	bf00      	nop
    
    }
}
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000040 	.word	0x20000040
 800071c:	20000044 	.word	0x20000044
 8000720:	20000000 	.word	0x20000000
 8000724:	2000002f 	.word	0x2000002f
 8000728:	08005bf0 	.word	0x08005bf0
 800072c:	08005c04 	.word	0x08005c04
 8000730:	20000030 	.word	0x20000030
 8000734:	20000001 	.word	0x20000001
 8000738:	08005c18 	.word	0x08005c18
 800073c:	20000031 	.word	0x20000031
 8000740:	20000032 	.word	0x20000032
 8000744:	200005d0 	.word	0x200005d0

08000748 <stop_pedestrian>:
 * @note    This function only works properly if the identifier is 1 or 2.
 *          If an invalid crosswalk is specified, the function simply returns
 *          without affect.
 * @see     toggle_pedestrian, go_pedestrian, set_pin, clear_pin
*****************************************************************************/
void stop_pedestrian(uint8_t crosswalk) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
    static uint32_t pin_green, pin_red;

    if (crosswalk == 1) {
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d118      	bne.n	800078a <stop_pedestrian+0x42>
        pin_green = PL1_Green;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <stop_pedestrian+0x98>)
 800075a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800075e:	601a      	str	r2, [r3, #0]
        pin_red = PL1_Red;
 8000760:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <stop_pedestrian+0x9c>)
 8000762:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000766:	601a      	str	r2, [r3, #0]
        crosswalk1_green = 0;
 8000768:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <stop_pedestrian+0xa0>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
        crosswalk1_red = 1;
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <stop_pedestrian+0xa4>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
        draw_string(0, 0, "Pedestrians cannot ");
 8000774:	4a1e      	ldr	r2, [pc, #120]	@ (80007f0 <stop_pedestrian+0xa8>)
 8000776:	2100      	movs	r1, #0
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fedb 	bl	8001534 <draw_string>
        draw_string(0, 8, "     cross lane 1..");
 800077e:	4a1d      	ldr	r2, [pc, #116]	@ (80007f4 <stop_pedestrian+0xac>)
 8000780:	2108      	movs	r1, #8
 8000782:	2000      	movs	r0, #0
 8000784:	f000 fed6 	bl	8001534 <draw_string>
 8000788:	e01a      	b.n	80007c0 <stop_pedestrian+0x78>
    } else if (crosswalk == 2) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d122      	bne.n	80007d6 <stop_pedestrian+0x8e>
        pin_green = PL2_Green;
 8000790:	4b13      	ldr	r3, [pc, #76]	@ (80007e0 <stop_pedestrian+0x98>)
 8000792:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000796:	601a      	str	r2, [r3, #0]
        pin_red = PL2_Red;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <stop_pedestrian+0x9c>)
 800079a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800079e:	601a      	str	r2, [r3, #0]
        crosswalk2_green = 0;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <stop_pedestrian+0xb0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
        crosswalk2_red = 1;
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <stop_pedestrian+0xb4>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
        draw_string(0, 0, "Pedestrians cannot ");
 80007ac:	4a10      	ldr	r2, [pc, #64]	@ (80007f0 <stop_pedestrian+0xa8>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 febf 	bl	8001534 <draw_string>
        draw_string(0, 8, "     cross lane 2..");
 80007b6:	4a12      	ldr	r2, [pc, #72]	@ (8000800 <stop_pedestrian+0xb8>)
 80007b8:	2108      	movs	r1, #8
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 feba 	bl	8001534 <draw_string>
    } else {
        return; // Invalid intersection
    }

    clear_pin(pin_green);
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <stop_pedestrian+0x98>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fef7 	bl	80005b8 <clear_pin>
    set_pin(pin_red);
 80007ca:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <stop_pedestrian+0x9c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fed4 	bl	800057c <set_pin>
 80007d4:	e000      	b.n	80007d8 <stop_pedestrian+0x90>
        return; // Invalid intersection
 80007d6:	bf00      	nop
}
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000048 	.word	0x20000048
 80007e4:	2000004c 	.word	0x2000004c
 80007e8:	20000000 	.word	0x20000000
 80007ec:	2000002f 	.word	0x2000002f
 80007f0:	08005c2c 	.word	0x08005c2c
 80007f4:	08005c40 	.word	0x08005c40
 80007f8:	20000030 	.word	0x20000030
 80007fc:	20000001 	.word	0x20000001
 8000800:	08005c54 	.word	0x08005c54

08000804 <go_intersection>:
 *            - The function needs to be called repeatedly.
 * 
 *            - A 5s timer (TIM4) has to be started ONCE before calling this function.    
 * @see     stop_intersection, set_pin, clear_pin
 *****************************************************************************/
void go_intersection(uint8_t intersection) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    static uint32_t greens, yellows, reds;
    static bool stage = 0;

    if (stage == 0) {
 800080e:	4b40      	ldr	r3, [pc, #256]	@ (8000910 <go_intersection+0x10c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	f083 0301 	eor.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d047      	beq.n	80008ac <go_intersection+0xa8>
        if (intersection == 1) {
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d10c      	bne.n	800083c <go_intersection+0x38>
            greens = (TL1_Green | TL3_Green);
 8000822:	4b3c      	ldr	r3, [pc, #240]	@ (8000914 <go_intersection+0x110>)
 8000824:	f04f 1204 	mov.w	r2, #262148	@ 0x40004
 8000828:	601a      	str	r2, [r3, #0]
            yellows = (TL1_Yellow | TL3_Yellow);
 800082a:	4b3b      	ldr	r3, [pc, #236]	@ (8000918 <go_intersection+0x114>)
 800082c:	f04f 1202 	mov.w	r2, #131074	@ 0x20002
 8000830:	601a      	str	r2, [r3, #0]
            reds = (TL1_Red | TL3_Red);
 8000832:	4b3a      	ldr	r3, [pc, #232]	@ (800091c <go_intersection+0x118>)
 8000834:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	e00e      	b.n	800085a <go_intersection+0x56>
        } else if (intersection == 2) {
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d15e      	bne.n	8000900 <go_intersection+0xfc>
            greens = (TL2_Green | TL4_Green);
 8000842:	4b34      	ldr	r3, [pc, #208]	@ (8000914 <go_intersection+0x110>)
 8000844:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8000848:	601a      	str	r2, [r3, #0]
            yellows = (TL2_Yellow | TL4_Yellow);
 800084a:	4b33      	ldr	r3, [pc, #204]	@ (8000918 <go_intersection+0x114>)
 800084c:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8000850:	601a      	str	r2, [r3, #0]
            reds = (TL2_Red | TL4_Red);
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <go_intersection+0x118>)
 8000854:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000858:	601a      	str	r2, [r3, #0]
        } else {
            return; // Invalid intersection
        }

        if (__HAL_TIM_GetCounter(&htim4) >= TIMER_2s) { // Turn red light off after 2s
 800085a:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <go_intersection+0x11c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000860:	f640 723a 	movw	r2, #3898	@ 0xf3a
 8000864:	4293      	cmp	r3, r2
 8000866:	d94d      	bls.n	8000904 <go_intersection+0x100>
            HAL_TIM_Base_Stop(&htim4);
 8000868:	482d      	ldr	r0, [pc, #180]	@ (8000920 <go_intersection+0x11c>)
 800086a:	f003 ffc1 	bl	80047f0 <HAL_TIM_Base_Stop>
            __HAL_TIM_SetCounter(&htim4, 0);
 800086e:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <go_intersection+0x11c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	@ 0x24
            clear_pin(reds);
 8000876:	4b29      	ldr	r3, [pc, #164]	@ (800091c <go_intersection+0x118>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe9c 	bl	80005b8 <clear_pin>
            set_pin(yellows);
 8000880:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <go_intersection+0x114>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe79 	bl	800057c <set_pin>
            HAL_TIM_Base_Start(&htim4);
 800088a:	4825      	ldr	r0, [pc, #148]	@ (8000920 <go_intersection+0x11c>)
 800088c:	f003 ff48 	bl	8004720 <HAL_TIM_Base_Start>
            (intersection == 1) ? (intersection1_red = 0) : (intersection2_red = 0);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d103      	bne.n	800089e <go_intersection+0x9a>
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <go_intersection+0x120>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
 800089c:	e002      	b.n	80008a4 <go_intersection+0xa0>
 800089e:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <go_intersection+0x124>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
            stage = 1;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <go_intersection+0x10c>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
            return;
 80008aa:	e02e      	b.n	800090a <go_intersection+0x106>
        } else {
            return;
        }
    }

    if (stage == 1) {
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <go_intersection+0x10c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d02a      	beq.n	800090a <go_intersection+0x106>
        if (__HAL_TIM_GetCounter(&htim4) >= orange_Delay) {
 80008b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000920 <go_intersection+0x11c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ba:	f241 720a 	movw	r2, #5898	@ 0x170a
 80008be:	4293      	cmp	r3, r2
 80008c0:	d922      	bls.n	8000908 <go_intersection+0x104>
            HAL_TIM_Base_Stop(&htim4);
 80008c2:	4817      	ldr	r0, [pc, #92]	@ (8000920 <go_intersection+0x11c>)
 80008c4:	f003 ff94 	bl	80047f0 <HAL_TIM_Base_Stop>
            __HAL_TIM_SetCounter(&htim4, 0);
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <go_intersection+0x11c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
            clear_pin(yellows);
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <go_intersection+0x114>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe6f 	bl	80005b8 <clear_pin>
            set_pin(greens);
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <go_intersection+0x110>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe4c 	bl	800057c <set_pin>
            (intersection == 1) ? (intersection1_green = 1) : (intersection2_green = 1);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d103      	bne.n	80008f2 <go_intersection+0xee>
 80008ea:	4b10      	ldr	r3, [pc, #64]	@ (800092c <go_intersection+0x128>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
 80008f0:	e002      	b.n	80008f8 <go_intersection+0xf4>
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <go_intersection+0x12c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]
            stage = 0;
 80008f8:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <go_intersection+0x10c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
            return;
 80008fe:	e004      	b.n	800090a <go_intersection+0x106>
            return; // Invalid intersection
 8000900:	bf00      	nop
 8000902:	e002      	b.n	800090a <go_intersection+0x106>
            return;
 8000904:	bf00      	nop
 8000906:	e000      	b.n	800090a <go_intersection+0x106>
        } else {
            return;
 8000908:	bf00      	nop
        }
    }
}
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000050 	.word	0x20000050
 8000914:	20000054 	.word	0x20000054
 8000918:	20000058 	.word	0x20000058
 800091c:	2000005c 	.word	0x2000005c
 8000920:	20000584 	.word	0x20000584
 8000924:	20000002 	.word	0x20000002
 8000928:	20000034 	.word	0x20000034
 800092c:	20000033 	.word	0x20000033
 8000930:	20000003 	.word	0x20000003

08000934 <stop_intersection>:
 *            - The function needs to be called repeatedly.
 * 
 *            - A 5s timer (TIM4) has to be started ONCE before calling this function.    
 * @see     go_intersection, set_pin, clear_pin
 *****************************************************************************/
void stop_intersection(uint8_t intersection) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
    static uint32_t greens, yellows, reds;
    static bool stage = 0;

    if (stage == 0) {
 800093e:	4b42      	ldr	r3, [pc, #264]	@ (8000a48 <stop_intersection+0x114>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d047      	beq.n	80009dc <stop_intersection+0xa8>
        if (intersection == 1) {
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d10c      	bne.n	800096c <stop_intersection+0x38>
            greens = (TL1_Green | TL3_Green);
 8000952:	4b3e      	ldr	r3, [pc, #248]	@ (8000a4c <stop_intersection+0x118>)
 8000954:	f04f 1204 	mov.w	r2, #262148	@ 0x40004
 8000958:	601a      	str	r2, [r3, #0]
            yellows = (TL1_Yellow | TL3_Yellow);
 800095a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a50 <stop_intersection+0x11c>)
 800095c:	f04f 1202 	mov.w	r2, #131074	@ 0x20002
 8000960:	601a      	str	r2, [r3, #0]
            reds = (TL1_Red | TL3_Red);
 8000962:	4b3c      	ldr	r3, [pc, #240]	@ (8000a54 <stop_intersection+0x120>)
 8000964:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e00e      	b.n	800098a <stop_intersection+0x56>
        } else if (intersection == 2) {
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d161      	bne.n	8000a36 <stop_intersection+0x102>
            greens = (TL2_Green | TL4_Green);
 8000972:	4b36      	ldr	r3, [pc, #216]	@ (8000a4c <stop_intersection+0x118>)
 8000974:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8000978:	601a      	str	r2, [r3, #0]
            yellows = (TL2_Yellow | TL4_Yellow);
 800097a:	4b35      	ldr	r3, [pc, #212]	@ (8000a50 <stop_intersection+0x11c>)
 800097c:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8000980:	601a      	str	r2, [r3, #0]
            reds = (TL2_Red | TL4_Red);
 8000982:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <stop_intersection+0x120>)
 8000984:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000988:	601a      	str	r2, [r3, #0]
        } else {
            return; // Invalid intersection
        }
        if (__HAL_TIM_GetCounter(&htim4) >= (TIMER_2s)) { // Turn green light off after 2s
 800098a:	4b33      	ldr	r3, [pc, #204]	@ (8000a58 <stop_intersection+0x124>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000990:	f640 723a 	movw	r2, #3898	@ 0xf3a
 8000994:	4293      	cmp	r3, r2
 8000996:	d950      	bls.n	8000a3a <stop_intersection+0x106>
            HAL_TIM_Base_Stop(&htim4);
 8000998:	482f      	ldr	r0, [pc, #188]	@ (8000a58 <stop_intersection+0x124>)
 800099a:	f003 ff29 	bl	80047f0 <HAL_TIM_Base_Stop>
            __HAL_TIM_SetCounter(&htim4, 0);
 800099e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a58 <stop_intersection+0x124>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
            clear_pin(greens);
 80009a6:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <stop_intersection+0x118>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fe04 	bl	80005b8 <clear_pin>
            set_pin(yellows);
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <stop_intersection+0x11c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fde1 	bl	800057c <set_pin>
            HAL_TIM_Base_Start(&htim4);
 80009ba:	4827      	ldr	r0, [pc, #156]	@ (8000a58 <stop_intersection+0x124>)
 80009bc:	f003 feb0 	bl	8004720 <HAL_TIM_Base_Start>
            (intersection == 1) ? (intersection1_green = 0) : (intersection2_green = 0);
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d103      	bne.n	80009ce <stop_intersection+0x9a>
 80009c6:	4b25      	ldr	r3, [pc, #148]	@ (8000a5c <stop_intersection+0x128>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
 80009cc:	e002      	b.n	80009d4 <stop_intersection+0xa0>
 80009ce:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <stop_intersection+0x12c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
            stage = 1;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <stop_intersection+0x114>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	701a      	strb	r2, [r3, #0]
            return;
 80009da:	e031      	b.n	8000a40 <stop_intersection+0x10c>
        } else {
            return;
        }
    }

    if (stage == 1) {
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <stop_intersection+0x114>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d02d      	beq.n	8000a40 <stop_intersection+0x10c>
        if (__HAL_TIM_GetCounter(&htim4) >= orange_Delay) { 
 80009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <stop_intersection+0x124>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009ea:	f241 720a 	movw	r2, #5898	@ 0x170a
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d925      	bls.n	8000a3e <stop_intersection+0x10a>
            HAL_TIM_Base_Stop(&htim4);
 80009f2:	4819      	ldr	r0, [pc, #100]	@ (8000a58 <stop_intersection+0x124>)
 80009f4:	f003 fefc 	bl	80047f0 <HAL_TIM_Base_Stop>
            __HAL_TIM_SetCounter(&htim4, 0);
 80009f8:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <stop_intersection+0x124>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	625a      	str	r2, [r3, #36]	@ 0x24
            clear_pin(yellows);
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <stop_intersection+0x11c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fdd7 	bl	80005b8 <clear_pin>
            set_pin(reds);
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <stop_intersection+0x120>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fdb4 	bl	800057c <set_pin>
            HAL_TIM_Base_Start(&htim4);
 8000a14:	4810      	ldr	r0, [pc, #64]	@ (8000a58 <stop_intersection+0x124>)
 8000a16:	f003 fe83 	bl	8004720 <HAL_TIM_Base_Start>
            (intersection == 1) ? (intersection1_red = 1) : (intersection2_red = 1);
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d103      	bne.n	8000a28 <stop_intersection+0xf4>
 8000a20:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <stop_intersection+0x130>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	e002      	b.n	8000a2e <stop_intersection+0xfa>
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <stop_intersection+0x134>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
            stage = 0;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <stop_intersection+0x114>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
            return;
 8000a34:	e004      	b.n	8000a40 <stop_intersection+0x10c>
            return; // Invalid intersection
 8000a36:	bf00      	nop
 8000a38:	e002      	b.n	8000a40 <stop_intersection+0x10c>
            return;
 8000a3a:	bf00      	nop
 8000a3c:	e000      	b.n	8000a40 <stop_intersection+0x10c>
        } else {
            return;
 8000a3e:	bf00      	nop
        }
    }
}
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000060 	.word	0x20000060
 8000a4c:	20000064 	.word	0x20000064
 8000a50:	20000068 	.word	0x20000068
 8000a54:	2000006c 	.word	0x2000006c
 8000a58:	20000584 	.word	0x20000584
 8000a5c:	20000033 	.word	0x20000033
 8000a60:	20000003 	.word	0x20000003
 8000a64:	20000002 	.word	0x20000002
 8000a68:	20000034 	.word	0x20000034

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b096      	sub	sp, #88	@ 0x58
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2244      	movs	r2, #68	@ 0x44
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f005 f87f 	bl	8005b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a92:	f001 ff5d 	bl	8002950 <HAL_PWREx_ControlVoltageScaling>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a9c:	f000 f9f8 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aba:	230a      	movs	r3, #10
 8000abc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000abe:	2307      	movs	r3, #7
 8000ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f001 ff94 	bl	80029fc <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ada:	f000 f9d9 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	2104      	movs	r1, #4
 8000af6:	4618      	mov	r0, r3
 8000af8:	f002 fb5c 	bl	80031b4 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b02:	f000 f9c5 	bl	8000e90 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3758      	adds	r7, #88	@ 0x58
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_GPIO_EXTI_Callback>:
 * @version  1.0
 * @param    uint16_t GPIO_Pin, the GPIO pin that triggered the interrupt.
 * @return   None
 * @see      https://wiki.st.com/stm32mcu/wiki/Getting_started_with_EXTI
 *****************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8000b1a:	88fb      	ldrh	r3, [r7, #6]
 8000b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b20:	d01f      	beq.n	8000b62 <HAL_GPIO_EXTI_Callback+0x52>
 8000b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b26:	f300 80cc 	bgt.w	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
 8000b2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b2e:	f000 8090 	beq.w	8000c52 <HAL_GPIO_EXTI_Callback+0x142>
 8000b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b36:	f300 80c4 	bgt.w	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
 8000b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b3e:	d06e      	beq.n	8000c1e <HAL_GPIO_EXTI_Callback+0x10e>
 8000b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b44:	f300 80bd 	bgt.w	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
 8000b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b4c:	f000 809b 	beq.w	8000c86 <HAL_GPIO_EXTI_Callback+0x176>
 8000b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b54:	f300 80b5 	bgt.w	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
 8000b58:	2b10      	cmp	r3, #16
 8000b5a:	d047      	beq.n	8000bec <HAL_GPIO_EXTI_Callback+0xdc>
 8000b5c:	2b80      	cmp	r3, #128	@ 0x80
 8000b5e:	d023      	beq.n	8000ba8 <HAL_GPIO_EXTI_Callback+0x98>
        car4_active = 0;
        draw_string(0, 55, "Car4 inactive");
      }
    break;
  }
}
 8000b60:	e0af      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
      if (!PL1_SW_HIT && crosswalk1_red) {
 8000b62:	4b5a      	ldr	r3, [pc, #360]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	f083 0301 	eor.w	r3, r3, #1
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80a4 	beq.w	8000cbc <HAL_GPIO_EXTI_Callback+0x1ac>
 8000b74:	4b56      	ldr	r3, [pc, #344]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f000 809e 	beq.w	8000cbc <HAL_GPIO_EXTI_Callback+0x1ac>
        PL1_SW_HIT = 1;
 8000b80:	4b52      	ldr	r3, [pc, #328]	@ (8000ccc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
        draw_string(0, 0, "Pedestrian1        ");
 8000b86:	4a53      	ldr	r2, [pc, #332]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f000 fcd2 	bl	8001534 <draw_string>
        draw_string(0, 8, "   wants to cross..");
 8000b90:	4a51      	ldr	r2, [pc, #324]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000b92:	2108      	movs	r1, #8
 8000b94:	2000      	movs	r0, #0
 8000b96:	f000 fccd 	bl	8001534 <draw_string>
        HAL_TIM_Base_Start_IT(&htim3); // Start toggling blue lights
 8000b9a:	4850      	ldr	r0, [pc, #320]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000b9c:	f003 fe50 	bl	8004840 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start(&htim4); // Start 5s timer to transition lights
 8000ba0:	484f      	ldr	r0, [pc, #316]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000ba2:	f003 fdbd 	bl	8004720 <HAL_TIM_Base_Start>
    break;
 8000ba6:	e089      	b.n	8000cbc <HAL_GPIO_EXTI_Callback+0x1ac>
      if (!PL2_SW_HIT && crosswalk2_red) {
 8000ba8:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f000 8083 	beq.w	8000cc0 <HAL_GPIO_EXTI_Callback+0x1b0>
 8000bba:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d07d      	beq.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x1b0>
        PL2_SW_HIT = 1;
 8000bc4:	4b47      	ldr	r3, [pc, #284]	@ (8000ce4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
        draw_string(0, 0, "Pedestrian2        ");
 8000bca:	4a48      	ldr	r2, [pc, #288]	@ (8000cec <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 fcb0 	bl	8001534 <draw_string>
        draw_string(0, 8, "   wants to cross..");
 8000bd4:	4a40      	ldr	r2, [pc, #256]	@ (8000cd8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 fcab 	bl	8001534 <draw_string>
        HAL_TIM_Base_Start_IT(&htim3); // Start toggling blue lights
 8000bde:	483f      	ldr	r0, [pc, #252]	@ (8000cdc <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000be0:	f003 fe2e 	bl	8004840 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start(&htim4); // Start 5s timer to transition lights
 8000be4:	483e      	ldr	r0, [pc, #248]	@ (8000ce0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000be6:	f003 fd9b 	bl	8004720 <HAL_TIM_Base_Start>
    break;
 8000bea:	e069      	b.n	8000cc0 <HAL_GPIO_EXTI_Callback+0x1b0>
      if (HAL_GPIO_ReadPin(TL1_Car_GPIO_Port, TL1_Car_Pin) == 0) {
 8000bec:	2110      	movs	r1, #16
 8000bee:	4840      	ldr	r0, [pc, #256]	@ (8000cf0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000bf0:	f001 fe58 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d108      	bne.n	8000c0c <HAL_GPIO_EXTI_Callback+0xfc>
        car1_active = 1;
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
        draw_string(0, 31, "Car1 active  ");
 8000c00:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000c02:	211f      	movs	r1, #31
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 fc95 	bl	8001534 <draw_string>
    break;
 8000c0a:	e05a      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
        car1_active = 0;
 8000c0c:	4b39      	ldr	r3, [pc, #228]	@ (8000cf4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
        draw_string(0, 31, "Car1 inactive");
 8000c12:	4a3a      	ldr	r2, [pc, #232]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000c14:	211f      	movs	r1, #31
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 fc8c 	bl	8001534 <draw_string>
    break;
 8000c1c:	e051      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
      if (HAL_GPIO_ReadPin(TL2_Car_GPIO_Port, TL2_Car_Pin) == 0) {
 8000c1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c22:	4837      	ldr	r0, [pc, #220]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000c24:	f001 fe3e 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d108      	bne.n	8000c40 <HAL_GPIO_EXTI_Callback+0x130>
        car2_active = 1;
 8000c2e:	4b35      	ldr	r3, [pc, #212]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
        draw_string(0, 39, "Car2 active  ");
 8000c34:	4a34      	ldr	r2, [pc, #208]	@ (8000d08 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000c36:	2127      	movs	r1, #39	@ 0x27
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 fc7b 	bl	8001534 <draw_string>
    break;
 8000c3e:	e040      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
        car2_active = 0;
 8000c40:	4b30      	ldr	r3, [pc, #192]	@ (8000d04 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	701a      	strb	r2, [r3, #0]
        draw_string(0, 39, "Car2 inactive");
 8000c46:	4a31      	ldr	r2, [pc, #196]	@ (8000d0c <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000c48:	2127      	movs	r1, #39	@ 0x27
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 fc72 	bl	8001534 <draw_string>
    break;
 8000c50:	e037      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
      if (HAL_GPIO_ReadPin(TL3_Car_GPIO_Port, TL3_Car_Pin) == 0) {
 8000c52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c56:	482a      	ldr	r0, [pc, #168]	@ (8000d00 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000c58:	f001 fe24 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d108      	bne.n	8000c74 <HAL_GPIO_EXTI_Callback+0x164>
        car3_active = 1;
 8000c62:	4b2b      	ldr	r3, [pc, #172]	@ (8000d10 <HAL_GPIO_EXTI_Callback+0x200>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
        draw_string(0, 47, "Car3 active  ");
 8000c68:	4a2a      	ldr	r2, [pc, #168]	@ (8000d14 <HAL_GPIO_EXTI_Callback+0x204>)
 8000c6a:	212f      	movs	r1, #47	@ 0x2f
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 fc61 	bl	8001534 <draw_string>
    break;
 8000c72:	e026      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
        car3_active = 0;
 8000c74:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <HAL_GPIO_EXTI_Callback+0x200>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
        draw_string(0, 47, "Car3 inactive");
 8000c7a:	4a27      	ldr	r2, [pc, #156]	@ (8000d18 <HAL_GPIO_EXTI_Callback+0x208>)
 8000c7c:	212f      	movs	r1, #47	@ 0x2f
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 fc58 	bl	8001534 <draw_string>
    break;
 8000c84:	e01d      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
      if (HAL_GPIO_ReadPin(TL4_Car_GPIO_Port, TL4_Car_Pin) == 0) {
 8000c86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8e:	f001 fe09 	bl	80028a4 <HAL_GPIO_ReadPin>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d108      	bne.n	8000caa <HAL_GPIO_EXTI_Callback+0x19a>
        car4_active = 1;
 8000c98:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x20c>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
        draw_string(0, 55, "Car4 active  ");
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <HAL_GPIO_EXTI_Callback+0x210>)
 8000ca0:	2137      	movs	r1, #55	@ 0x37
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 fc46 	bl	8001534 <draw_string>
    break;
 8000ca8:	e00b      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
        car4_active = 0;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_GPIO_EXTI_Callback+0x20c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
        draw_string(0, 55, "Car4 inactive");
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <HAL_GPIO_EXTI_Callback+0x214>)
 8000cb2:	2137      	movs	r1, #55	@ 0x37
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f000 fc3d 	bl	8001534 <draw_string>
    break;
 8000cba:	e002      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
    break;
 8000cbc:	bf00      	nop
 8000cbe:	e000      	b.n	8000cc2 <HAL_GPIO_EXTI_Callback+0x1b2>
    break;
 8000cc0:	bf00      	nop
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000031 	.word	0x20000031
 8000cd0:	2000002f 	.word	0x2000002f
 8000cd4:	08005c68 	.word	0x08005c68
 8000cd8:	08005c7c 	.word	0x08005c7c
 8000cdc:	20000538 	.word	0x20000538
 8000ce0:	20000584 	.word	0x20000584
 8000ce4:	20000032 	.word	0x20000032
 8000ce8:	20000001 	.word	0x20000001
 8000cec:	08005c90 	.word	0x08005c90
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	2000066c 	.word	0x2000066c
 8000cf8:	08005ca4 	.word	0x08005ca4
 8000cfc:	08005cb4 	.word	0x08005cb4
 8000d00:	48000400 	.word	0x48000400
 8000d04:	2000066d 	.word	0x2000066d
 8000d08:	08005cc4 	.word	0x08005cc4
 8000d0c:	08005cd4 	.word	0x08005cd4
 8000d10:	2000066e 	.word	0x2000066e
 8000d14:	08005ce4 	.word	0x08005ce4
 8000d18:	08005cf4 	.word	0x08005cf4
 8000d1c:	2000066f 	.word	0x2000066f
 8000d20:	08005d04 	.word	0x08005d04
 8000d24:	08005d14 	.word	0x08005d14

08000d28 <HAL_TIM_PeriodElapsedCallback>:
 * @version  1.0
 * @param    TIM_HandleTypeDef *htim, the Timer that triggered the interrupt.
 * @return   None
 * @see      https://www.digikey.com/en/maker/projects/getting-started-with-stm32-timers-and-timer-interrupts/d08e6493cefa486fb1e79c43c0b08cc6
 *****************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a4a      	ldr	r2, [pc, #296]	@ (8000e60 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d156      	bne.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0xc0>
    /* Toggle the blue LEDS every 125ms, with TIM3*/
    if (PL1_SW_HIT && crosswalk1_red) {
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d008      	beq.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000d44:	4b48      	ldr	r3, [pc, #288]	@ (8000e68 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x2e>
      toggle_pedestrian(1);
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff fc52 	bl	80005f8 <toggle_pedestrian>
      return;
 8000d54:	e081      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
    } else if (PL2_SW_HIT && crosswalk2_red) {
 8000d56:	4b45      	ldr	r3, [pc, #276]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d008      	beq.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x4a>
      toggle_pedestrian(2);
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f7ff fc44 	bl	80005f8 <toggle_pedestrian>
      return;
 8000d70:	e073      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
    }

    /* Crosswalk is green, turn of blue indicator lights */
    if (PL1_SW_HIT && crosswalk1_green) {
 8000d72:	4b3c      	ldr	r3, [pc, #240]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d018      	beq.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x86>
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d013      	beq.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x86>
      clear_pin(PL1_Blue);
 8000d86:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000d8a:	f7ff fc15 	bl	80005b8 <clear_pin>
      PL1_SW_HIT = 0;
 8000d8e:	4b35      	ldr	r3, [pc, #212]	@ (8000e64 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]

      /* Stop and reset the 125ms timer (TIM3) */
      __HAL_TIM_SetCounter(&htim3, 0);
 8000d94:	4b38      	ldr	r3, [pc, #224]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000d9c:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f06f 0201 	mvn.w	r2, #1
 8000da4:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Stop_IT(&htim3);
 8000da6:	4834      	ldr	r0, [pc, #208]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000da8:	f003 fdba 	bl	8004920 <HAL_TIM_Base_Stop_IT>
      return;
 8000dac:	e055      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
    }

    /* Crosswalk is green, turn of blue indicator lights */
    if (PL2_SW_HIT && crosswalk2_green) {
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d017      	beq.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8000db8:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0xc0>
      clear_pin(PL2_Blue);
 8000dc2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dc6:	f7ff fbf7 	bl	80005b8 <clear_pin>
      PL2_SW_HIT = 0;
 8000dca:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
      
      /* Stop and reset the 125ms timer (TIM3) */
      __HAL_TIM_SetCounter(&htim3, 0);
 8000dd0:	4b29      	ldr	r3, [pc, #164]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000dd8:	4b27      	ldr	r3, [pc, #156]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f06f 0201 	mvn.w	r2, #1
 8000de0:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Stop_IT(&htim3);
 8000de2:	4825      	ldr	r0, [pc, #148]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000de4:	f003 fd9c 	bl	8004920 <HAL_TIM_Base_Stop_IT>
    }
  }

  /* Ensure the pedestrian lights stays green for 'walking_Delay' seconds*/
  if (htim->Instance == TIM5) {
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a24      	ldr	r2, [pc, #144]	@ (8000e80 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d133      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
    if (crosswalk1_green && intersection1_green) {
 8000df2:	4b20      	ldr	r3, [pc, #128]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d014      	beq.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0xfe>
 8000dfc:	4b21      	ldr	r3, [pc, #132]	@ (8000e84 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d00f      	beq.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0xfe>
      stop_pedestrian(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fc9e 	bl	8000748 <stop_pedestrian>

      /* Clear 'walking_Delay' timer */
      HAL_TIM_Base_Stop_IT(&htim5);
 8000e0c:	481e      	ldr	r0, [pc, #120]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e0e:	f003 fd87 	bl	8004920 <HAL_TIM_Base_Stop_IT>
      __HAL_TIM_SetCounter(&htim5, 0);
 8000e12:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f06f 0201 	mvn.w	r2, #1
 8000e22:	611a      	str	r2, [r3, #16]
      return;
 8000e24:	e019      	b.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
    } else if (crosswalk2_green && intersection2_green) {
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d014      	beq.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
 8000e30:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00f      	beq.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x132>
      stop_pedestrian(2);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f7ff fc84 	bl	8000748 <stop_pedestrian>

      /* Clear 'walking_Delay' timer */
      HAL_TIM_Base_Stop_IT(&htim5);
 8000e40:	4811      	ldr	r0, [pc, #68]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e42:	f003 fd6d 	bl	8004920 <HAL_TIM_Base_Stop_IT>
      __HAL_TIM_SetCounter(&htim5, 0);
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	@ 0x24
      __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE);
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f06f 0201 	mvn.w	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
      return;
 8000e58:	bf00      	nop
    }
  }
}
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40000400 	.word	0x40000400
 8000e64:	20000031 	.word	0x20000031
 8000e68:	2000002f 	.word	0x2000002f
 8000e6c:	20000032 	.word	0x20000032
 8000e70:	20000001 	.word	0x20000001
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000538 	.word	0x20000538
 8000e7c:	20000030 	.word	0x20000030
 8000e80:	40000c00 	.word	0x40000c00
 8000e84:	20000033 	.word	0x20000033
 8000e88:	200005d0 	.word	0x200005d0
 8000e8c:	20000003 	.word	0x20000003

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <Error_Handler+0x8>

08000e9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08a      	sub	sp, #40	@ 0x28
 8000ea0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800109c <MX_GPIO_Init+0x200>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb6:	4a79      	ldr	r2, [pc, #484]	@ (800109c <MX_GPIO_Init+0x200>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ebe:	4b77      	ldr	r3, [pc, #476]	@ (800109c <MX_GPIO_Init+0x200>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	4b74      	ldr	r3, [pc, #464]	@ (800109c <MX_GPIO_Init+0x200>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	4a73      	ldr	r2, [pc, #460]	@ (800109c <MX_GPIO_Init+0x200>)
 8000ed0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ed4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ed6:	4b71      	ldr	r3, [pc, #452]	@ (800109c <MX_GPIO_Init+0x200>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	4b6e      	ldr	r3, [pc, #440]	@ (800109c <MX_GPIO_Init+0x200>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800109c <MX_GPIO_Init+0x200>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eee:	4b6b      	ldr	r3, [pc, #428]	@ (800109c <MX_GPIO_Init+0x200>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b68      	ldr	r3, [pc, #416]	@ (800109c <MX_GPIO_Init+0x200>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efe:	4a67      	ldr	r2, [pc, #412]	@ (800109c <MX_GPIO_Init+0x200>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f06:	4b65      	ldr	r3, [pc, #404]	@ (800109c <MX_GPIO_Init+0x200>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2120      	movs	r1, #32
 8000f16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1a:	f001 fcdb 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _595_STCP_Pin|Disp_Reset_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8000f24:	485e      	ldr	r0, [pc, #376]	@ (80010a0 <MX_GPIO_Init+0x204>)
 8000f26:	f001 fcd5 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, _595_Enable_Pin|Disp_Data_Instr_Pin|Disp_CS_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 6128 	mov.w	r1, #2688	@ 0xa80
 8000f30:	485c      	ldr	r0, [pc, #368]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f32:	f001 fccf 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(_595_Reset_GPIO_Port, _595_Reset_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f001 fcc8 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|_595_Reset_Pin;
 8000f44:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f001 faf6 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_Car_Pin;
 8000f64:	2310      	movs	r3, #16
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f68:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	484a      	ldr	r0, [pc, #296]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000f7a:	f001 fae9 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _595_STCP_Pin;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(_595_STCP_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4842      	ldr	r0, [pc, #264]	@ (80010a0 <MX_GPIO_Init+0x204>)
 8000f98:	f001 fada 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_Car_Pin|TL3_Car_Pin;
 8000f9c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000fa2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	483b      	ldr	r0, [pc, #236]	@ (80010a0 <MX_GPIO_Init+0x204>)
 8000fb4:	f001 facc 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = _595_Enable_Pin;
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4835      	ldr	r0, [pc, #212]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000fd0:	f001 fabe 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Data_Instr_Pin|Disp_CS_Pin;
 8000fd4:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	482d      	ldr	r0, [pc, #180]	@ (80010a4 <MX_GPIO_Init+0x208>)
 8000fee:	f001 faaf 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL4_Car_Pin;
 8000ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ff8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100c:	f001 faa0 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL1_Switch_Pin;
 8001010:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL1_Switch_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102a:	f001 fa91 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Disp_Reset_Pin;
 800102e:	2340      	movs	r3, #64	@ 0x40
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Disp_Reset_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4816      	ldr	r0, [pc, #88]	@ (80010a0 <MX_GPIO_Init+0x204>)
 8001046:	f001 fa83 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL2_Switch_Pin;
 800104a:	2380      	movs	r3, #128	@ 0x80
 800104c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL2_Switch_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <MX_GPIO_Init+0x204>)
 8001060:	f001 fa76 	bl	8002550 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	200a      	movs	r0, #10
 800106a:	f001 fa3a 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800106e:	200a      	movs	r0, #10
 8001070:	f001 fa53 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2100      	movs	r1, #0
 8001078:	2017      	movs	r0, #23
 800107a:	f001 fa32 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800107e:	2017      	movs	r0, #23
 8001080:	f001 fa4b 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2100      	movs	r1, #0
 8001088:	2028      	movs	r0, #40	@ 0x28
 800108a:	f001 fa2a 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800108e:	2028      	movs	r0, #40	@ 0x28
 8001090:	f001 fa43 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	@ 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000400 	.word	0x48000400
 80010a4:	48000800 	.word	0x48000800

080010a8 <main>:
#define RUN_TEST_PROGRAM
#undef RUN_TEST_PROGRAM


int main(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0

  HAL_Init();
 80010ac:	f001 f89e 	bl	80021ec <HAL_Init>
  SystemClock_Config();
 80010b0:	f7ff fcdc 	bl	8000a6c <SystemClock_Config>

  MX_GPIO_Init();
 80010b4:	f7ff fef2 	bl	8000e9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010b8:	f000 ffe2 	bl	8002080 <MX_USART2_UART_Init>
 
  MX_SPI3_Init();
 80010bc:	f000 f84c 	bl	8001158 <MX_SPI3_Init>
  MX_SPI2_Init();
 80010c0:	f000 f80c 	bl	80010dc <MX_SPI2_Init>
  MX_TIM3_Init();
 80010c4:	f000 fb04 	bl	80016d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010c8:	f000 fb50 	bl	800176c <MX_TIM4_Init>
  MX_TIM5_Init();
 80010cc:	f000 fb9e 	bl	800180c <MX_TIM5_Init>
  MX_TIM15_Init();
 80010d0:	f000 fbec 	bl	80018ac <MX_TIM15_Init>

#ifdef RUN_TEST_PROGRAM
  Test_Program();
#else
  Traffic();
 80010d4:	f000 fcae 	bl	8001a34 <Traffic>
#endif

  while(1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <main+0x30>

080010dc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <MX_SPI2_Init+0x74>)
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <MX_SPI2_Init+0x78>)
 80010e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_SPI2_Init+0x74>)
 80010e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <MX_SPI2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <MX_SPI2_Init+0x74>)
 80010f6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <MX_SPI2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <MX_SPI2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <MX_SPI2_Init+0x74>)
 800110a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800110e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <MX_SPI2_Init+0x74>)
 8001112:	2228      	movs	r2, #40	@ 0x28
 8001114:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <MX_SPI2_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <MX_SPI2_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <MX_SPI2_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001128:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <MX_SPI2_Init+0x74>)
 800112a:	2207      	movs	r2, #7
 800112c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <MX_SPI2_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001134:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <MX_SPI2_Init+0x74>)
 8001136:	2208      	movs	r2, #8
 8001138:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_SPI2_Init+0x74>)
 800113c:	f002 ff1a 	bl	8003f74 <HAL_SPI_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001146:	f7ff fea3 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000070 	.word	0x20000070
 8001154:	40003800 	.word	0x40003800

08001158 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_SPI3_Init+0x74>)
 800115e:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <MX_SPI3_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_SPI3_Init+0x74>)
 8001164:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001168:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_SPI3_Init+0x74>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_SPI3_Init+0x74>)
 8001172:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001176:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_SPI3_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800117e:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <MX_SPI3_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001184:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_SPI3_Init+0x74>)
 8001186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800118a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_SPI3_Init+0x74>)
 800118e:	2210      	movs	r2, #16
 8001190:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_SPI3_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <MX_SPI3_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <MX_SPI3_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_SPI3_Init+0x74>)
 80011a6:	2207      	movs	r2, #7
 80011a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <MX_SPI3_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_SPI3_Init+0x74>)
 80011b2:	2208      	movs	r2, #8
 80011b4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_SPI3_Init+0x74>)
 80011b8:	f002 fedc 	bl	8003f74 <HAL_SPI_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80011c2:	f7ff fe65 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000d4 	.word	0x200000d4
 80011d0:	40003c00 	.word	0x40003c00

080011d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08e      	sub	sp, #56	@ 0x38
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001320 <HAL_SPI_MspInit+0x14c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d145      	bne.n	8001282 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001200:	6593      	str	r3, [r2, #88]	@ 0x58
 8001202:	4b48      	ldr	r3, [pc, #288]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800120a:	623b      	str	r3, [r7, #32]
 800120c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	4b45      	ldr	r3, [pc, #276]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	4a44      	ldr	r2, [pc, #272]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121a:	4b42      	ldr	r3, [pc, #264]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	4a3e      	ldr	r2, [pc, #248]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001232:	4b3c      	ldr	r3, [pc, #240]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 800123e:	2308      	movs	r3, #8
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800124e:	2305      	movs	r3, #5
 8001250:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4833      	ldr	r0, [pc, #204]	@ (8001328 <HAL_SPI_MspInit+0x154>)
 800125a:	f001 f979 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_SCLK_Pin;
 800125e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001262:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126c:	2303      	movs	r3, #3
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001270:	2305      	movs	r3, #5
 8001272:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SPI_SCLK_GPIO_Port, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	482c      	ldr	r0, [pc, #176]	@ (800132c <HAL_SPI_MspInit+0x158>)
 800127c:	f001 f968 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001280:	e049      	b.n	8001316 <HAL_SPI_MspInit+0x142>
  else if(spiHandle->Instance==SPI3)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a2a      	ldr	r2, [pc, #168]	@ (8001330 <HAL_SPI_MspInit+0x15c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d144      	bne.n	8001316 <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001290:	4a24      	ldr	r2, [pc, #144]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 8001292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001296:	6593      	str	r3, [r2, #88]	@ 0x58
 8001298:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c0:	4a18      	ldr	r2, [pc, #96]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80012c2:	f043 0302 	orr.w	r3, r3, #2
 80012c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_SPI_MspInit+0x150>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = _595_SHCP_Pin;
 80012d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e6:	2306      	movs	r3, #6
 80012e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(_595_SHCP_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	480d      	ldr	r0, [pc, #52]	@ (8001328 <HAL_SPI_MspInit+0x154>)
 80012f2:	f001 f92d 	bl	8002550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = _595_DS_Pin;
 80012f6:	2320      	movs	r3, #32
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001306:	2306      	movs	r3, #6
 8001308:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(_595_DS_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4806      	ldr	r0, [pc, #24]	@ (800132c <HAL_SPI_MspInit+0x158>)
 8001312:	f001 f91d 	bl	8002550 <HAL_GPIO_Init>
}
 8001316:	bf00      	nop
 8001318:	3738      	adds	r7, #56	@ 0x38
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40003800 	.word	0x40003800
 8001324:	40021000 	.word	0x40021000
 8001328:	48000800 	.word	0x48000800
 800132c:	48000400 	.word	0x48000400
 8001330:	40003c00 	.word	0x40003c00

08001334 <reset_OLED>:
 *
 * @version 1.0
 * @param   None
 * @return  None
 *****************************************************************************/
void reset_OLED(void) {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET); // Reset OLED
 8001338:	2200      	movs	r2, #0
 800133a:	2140      	movs	r1, #64	@ 0x40
 800133c:	4806      	ldr	r0, [pc, #24]	@ (8001358 <reset_OLED+0x24>)
 800133e:	f001 fac9 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001342:	2014      	movs	r0, #20
 8001344:	f000 ffce 	bl	80022e4 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET); // Release reset
 8001348:	2201      	movs	r2, #1
 800134a:	2140      	movs	r1, #64	@ 0x40
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <reset_OLED+0x24>)
 800134e:	f001 fac1 	bl	80028d4 <HAL_GPIO_WritePin>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	48000400 	.word	0x48000400

0800135c <send_command_OLED>:
 * @param   Explain the parameters ex: 'uint32_t value, A 24-bit value representing the desired output
 *                                                      state for the shift registers.'
 * @return  Return type, description of what the function returns default None
 * @see     send_data_OLED
 *****************************************************************************/
void send_command_OLED(uint8_t command) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_RESET);                 // Select OLED
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800136c:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <send_command_OLED+0x44>)
 800136e:	f001 fab1 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Disp_Data_Instr_GPIO_Port, Disp_Data_Instr_Pin, GPIO_PIN_RESET); // Command mode
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001378:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <send_command_OLED+0x44>)
 800137a:	f001 faab 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &command, 1, HAL_MAX_DELAY);
 800137e:	1df9      	adds	r1, r7, #7
 8001380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001384:	2201      	movs	r2, #1
 8001386:	4807      	ldr	r0, [pc, #28]	@ (80013a4 <send_command_OLED+0x48>)
 8001388:	f002 fe97 	bl	80040ba <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_SET); // Deselect OLED
 800138c:	2201      	movs	r2, #1
 800138e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001392:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <send_command_OLED+0x44>)
 8001394:	f001 fa9e 	bl	80028d4 <HAL_GPIO_WritePin>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	48000800 	.word	0x48000800
 80013a4:	20000070 	.word	0x20000070

080013a8 <send_data_OLED>:
 * @version 1.0
 * @param   Explain the parameters ex: 'uint32_t value, A 24-bit value representing the desired output
 *                                                      state for the shift registers.'
 * @return  Return type, description of what the function returns default None
 *****************************************************************************/
void send_data_OLED(uint8_t data) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_RESET);               // Select OLED
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <send_data_OLED+0x44>)
 80013ba:	f001 fa8b 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Disp_Data_Instr_GPIO_Port, Disp_Data_Instr_Pin, GPIO_PIN_SET); // Data mode
 80013be:	2201      	movs	r2, #1
 80013c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c4:	4809      	ldr	r0, [pc, #36]	@ (80013ec <send_data_OLED+0x44>)
 80013c6:	f001 fa85 	bl	80028d4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80013ca:	1df9      	adds	r1, r7, #7
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013d0:	2201      	movs	r2, #1
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <send_data_OLED+0x48>)
 80013d4:	f002 fe71 	bl	80040ba <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(Disp_CS_GPIO_Port, Disp_CS_Pin, GPIO_PIN_SET); // Deselect OLED
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013de:	4803      	ldr	r0, [pc, #12]	@ (80013ec <send_data_OLED+0x44>)
 80013e0:	f001 fa78 	bl	80028d4 <HAL_GPIO_WritePin>
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	48000800 	.word	0x48000800
 80013f0:	20000070 	.word	0x20000070

080013f4 <init_OLED>:
 *
 * @version 1.0
 * @param   None
 * @return  None
 *****************************************************************************/
void init_OLED(void) {
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
    reset_OLED();
 80013fa:	f7ff ff9b 	bl	8001334 <reset_OLED>

    /* Information provided by the datasheet */
    uint8_t init_sequence[] = {
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <init_OLED+0x48>)
 8001400:	1d3c      	adds	r4, r7, #4
 8001402:	461d      	mov	r5, r3
 8001404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001408:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800140c:	c403      	stmia	r4!, {r0, r1}
 800140e:	7022      	strb	r2, [r4, #0]
        0xA4,       // Entire display ON (resume to RAM content)
        0xA6,       // Normal display mode (A7 for inverse)
        0xAF        // Display ON
    };

    for (uint8_t i = 0; i < sizeof(init_sequence); i++) {
 8001410:	2300      	movs	r3, #0
 8001412:	77fb      	strb	r3, [r7, #31]
 8001414:	e00a      	b.n	800142c <init_OLED+0x38>
        send_command_OLED(init_sequence[i]);
 8001416:	7ffb      	ldrb	r3, [r7, #31]
 8001418:	3320      	adds	r3, #32
 800141a:	443b      	add	r3, r7
 800141c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff9b 	bl	800135c <send_command_OLED>
    for (uint8_t i = 0; i < sizeof(init_sequence); i++) {
 8001426:	7ffb      	ldrb	r3, [r7, #31]
 8001428:	3301      	adds	r3, #1
 800142a:	77fb      	strb	r3, [r7, #31]
 800142c:	7ffb      	ldrb	r3, [r7, #31]
 800142e:	2b18      	cmp	r3, #24
 8001430:	d9f1      	bls.n	8001416 <init_OLED+0x22>
    }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	08005d24 	.word	0x08005d24

08001440 <update_screen>:
 * @version  1.0
 * @param    None
 * @return   None
 * @see      send_command_OLED, send_data_OLED
 *****************************************************************************/
void update_screen(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e021      	b.n	8001490 <update_screen+0x50>
        /* Set page start adress */
        send_command_OLED(0xB0 + page);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	3b50      	subs	r3, #80	@ 0x50
 8001450:	b2db      	uxtb	r3, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff82 	bl	800135c <send_command_OLED>
        /* Set column adresses, start at column 0 */
        send_command_OLED(0x00); // Set lower column start adress
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff ff7f 	bl	800135c <send_command_OLED>
        send_command_OLED(0x10); // Set higher column start adress
 800145e:	2010      	movs	r0, #16
 8001460:	f7ff ff7c 	bl	800135c <send_command_OLED>

        /* Write 128 bytes from current page*/
        for (uint8_t col = 0; col < 128; col++) {
 8001464:	2300      	movs	r3, #0
 8001466:	71bb      	strb	r3, [r7, #6]
 8001468:	e00b      	b.n	8001482 <update_screen+0x42>
            send_data_OLED(OLED_framebuffer[page * OLED_WIDTH + col]);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	01da      	lsls	r2, r3, #7
 800146e:	79bb      	ldrb	r3, [r7, #6]
 8001470:	4413      	add	r3, r2
 8001472:	4a0b      	ldr	r2, [pc, #44]	@ (80014a0 <update_screen+0x60>)
 8001474:	5cd3      	ldrb	r3, [r2, r3]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff96 	bl	80013a8 <send_data_OLED>
        for (uint8_t col = 0; col < 128; col++) {
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	3301      	adds	r3, #1
 8001480:	71bb      	strb	r3, [r7, #6]
 8001482:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001486:	2b00      	cmp	r3, #0
 8001488:	daef      	bge.n	800146a <update_screen+0x2a>
    for (uint8_t page = 0; page < 8; page++) {
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	3301      	adds	r3, #1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b07      	cmp	r3, #7
 8001494:	d9da      	bls.n	800144c <update_screen+0xc>
        }
    }
}
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000138 	.word	0x20000138

080014a4 <clear_screen>:
 *           and sends that to the display, turning off every pixel.
 * @version  1.0
 * @param    None
 * @return   None
 *****************************************************************************/
void clear_screen(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    /* Set all bytes in the framebuffer to 0*/
    memset(OLED_framebuffer, 0x00, sizeof(OLED_framebuffer));
 80014a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ac:	2100      	movs	r1, #0
 80014ae:	4803      	ldr	r0, [pc, #12]	@ (80014bc <clear_screen+0x18>)
 80014b0:	f004 fb65 	bl	8005b7e <memset>
    update_screen(); // Send to display
 80014b4:	f7ff ffc4 	bl	8001440 <update_screen>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000138 	.word	0x20000138

080014c0 <draw_char>:
 * @note    The function only updates the framebuffer and not the display.
 *          To show the changes onscreen, call 'update_screen' after this function.
 *
 * @see     draw_string
 *****************************************************************************/
void draw_char(uint8_t x, uint8_t y, char c) {
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	460b      	mov	r3, r1
 80014cc:	71bb      	strb	r3, [r7, #6]
 80014ce:	4613      	mov	r3, r2
 80014d0:	717b      	strb	r3, [r7, #5]
    /* Is the character a valid ASCII character? */
    if (c < 32 || c > 126)
 80014d2:	797b      	ldrb	r3, [r7, #5]
 80014d4:	2b1f      	cmp	r3, #31
 80014d6:	d923      	bls.n	8001520 <draw_char+0x60>
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	2b7e      	cmp	r3, #126	@ 0x7e
 80014dc:	d820      	bhi.n	8001520 <draw_char+0x60>
        return;

    const uint8_t *char_bitmap = Font5x7[c - 32]; // Get bitmap for character
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	f1a3 0220 	sub.w	r2, r3, #32
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <draw_char+0x6c>)
 80014ec:	4413      	add	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]

    for (uint8_t i = 0; i < 5; i++) {  // Each column of the character
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e010      	b.n	8001518 <draw_char+0x58>
        OLED_framebuffer[x + (y / 8) * 128 + i] = char_bitmap[i]; // Calculate framebuffer index
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	441a      	add	r2, r3
 80014fc:	79f9      	ldrb	r1, [r7, #7]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	01db      	lsls	r3, r3, #7
 8001506:	4419      	add	r1, r3
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	440b      	add	r3, r1
 800150c:	7811      	ldrb	r1, [r2, #0]
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <draw_char+0x70>)
 8001510:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 5; i++) {  // Each column of the character
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3301      	adds	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b04      	cmp	r3, #4
 800151c:	d9eb      	bls.n	80014f6 <draw_char+0x36>
 800151e:	e000      	b.n	8001522 <draw_char+0x62>
        return;
 8001520:	bf00      	nop
    }
}
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	08005da8 	.word	0x08005da8
 8001530:	20000138 	.word	0x20000138

08001534 <draw_string>:
  * @param   uint8_t y, The vertical starting position (0-63).
  * @param   char *str, Pointer to the null-terminated string to render.
  * @return  None
  * @see     draw_char
  *****************************************************************************/
void draw_string(uint8_t x, uint8_t y, const char *str) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	603a      	str	r2, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	460b      	mov	r3, r1
 8001542:	71bb      	strb	r3, [r7, #6]
    while (*str) {
 8001544:	e014      	b.n	8001570 <draw_string+0x3c>
        draw_char(x, y, *str);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	781a      	ldrb	r2, [r3, #0]
 800154a:	79b9      	ldrb	r1, [r7, #6]
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff ffb6 	bl	80014c0 <draw_char>
        x += 6; // Move cursor to the next character (5 pixels + 1 for spacing)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	3306      	adds	r3, #6
 8001558:	71fb      	strb	r3, [r7, #7]
        if (x + 5 >= 128) {           // If at the end of the screen
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b7a      	cmp	r3, #122	@ 0x7a
 800155e:	d904      	bls.n	800156a <draw_string+0x36>
            x = 0;  // Move to the beginning of the next line
 8001560:	2300      	movs	r3, #0
 8001562:	71fb      	strb	r3, [r7, #7]
            y += 8; // Move down one row
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	3308      	adds	r3, #8
 8001568:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	603b      	str	r3, [r7, #0]
    while (*str) {
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e6      	bne.n	8001546 <draw_string+0x12>
    }
    update_screen();
 8001578:	f7ff ff62 	bl	8001440 <update_screen>
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <HAL_MspInit+0x44>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800158e:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <HAL_MspInit+0x44>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6613      	str	r3, [r2, #96]	@ 0x60
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <HAL_MspInit+0x44>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <HAL_MspInit+0x44>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	4a08      	ldr	r2, [pc, #32]	@ (80015c8 <HAL_MspInit+0x44>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_MspInit+0x44>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000

080015cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <NMI_Handler+0x4>

080015d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <HardFault_Handler+0x4>

080015dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <MemManage_Handler+0x4>

080015e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <BusFault_Handler+0x4>

080015ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <UsageFault_Handler+0x4>

080015f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 fe3f 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}

0800162a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TL1_Car_Pin);
 800162e:	2010      	movs	r0, #16
 8001630:	f001 f968 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PL2_Switch_Pin);
 800163c:	2080      	movs	r0, #128	@ 0x80
 800163e:	f001 f961 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800164e:	f003 f996 	bl	800497e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000061c 	.word	0x2000061c

0800165c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <TIM3_IRQHandler+0x10>)
 8001662:	f003 f98c 	bl	800497e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000538 	.word	0x20000538

08001670 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TL4_Car_Pin);
 8001674:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001678:	f001 f944 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TL2_Car_Pin);
 800167c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001680:	f001 f940 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TL3_Car_Pin);
 8001684:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001688:	f001 f93c 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PL1_Switch_Pin);
 800168c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001690:	f001 f938 	bl	8002904 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <TIM5_IRQHandler+0x10>)
 800169e:	f003 f96e 	bl	800497e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200005d0 	.word	0x200005d0

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <MX_TIM3_Init+0x94>)
 80016f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001768 <MX_TIM3_Init+0x98>)
 80016f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000 - 1;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <MX_TIM3_Init+0x94>)
 80016f6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80016fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_TIM3_Init+0x94>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250 - 1;
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001704:	22f9      	movs	r2, #249	@ 0xf9
 8001706:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_TIM3_Init+0x94>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001714:	4813      	ldr	r0, [pc, #76]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001716:	f002 ffab 	bl	8004670 <HAL_TIM_Base_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001720:	f7ff fbb6 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <MX_TIM3_Init+0x94>)
 8001732:	f003 fa2b 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800173c:	f7ff fba8 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	@ (8001764 <MX_TIM3_Init+0x94>)
 800174e:	f003 fc4f 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001758:	f7ff fb9a 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	3720      	adds	r7, #32
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000538 	.word	0x20000538
 8001768:	40000400 	.word	0x40000400

0800176c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <MX_TIM4_Init+0x98>)
 800178c:	4a1e      	ldr	r2, [pc, #120]	@ (8001808 <MX_TIM4_Init+0x9c>)
 800178e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 40000 - 1;
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <MX_TIM4_Init+0x98>)
 8001792:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001796:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <MX_TIM4_Init+0x98>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000 - 1;
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <MX_TIM4_Init+0x98>)
 80017a0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <MX_TIM4_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <MX_TIM4_Init+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017b2:	4814      	ldr	r0, [pc, #80]	@ (8001804 <MX_TIM4_Init+0x98>)
 80017b4:	f002 ff5c 	bl	8004670 <HAL_TIM_Base_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80017be:	f7ff fb67 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4619      	mov	r1, r3
 80017ce:	480d      	ldr	r0, [pc, #52]	@ (8001804 <MX_TIM4_Init+0x98>)
 80017d0:	f003 f9dc 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80017da:	f7ff fb59 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017de:	2300      	movs	r3, #0
 80017e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	4806      	ldr	r0, [pc, #24]	@ (8001804 <MX_TIM4_Init+0x98>)
 80017ec:	f003 fc00 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80017f6:	f7ff fb4b 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	3720      	adds	r7, #32
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000584 	.word	0x20000584
 8001808:	40000800 	.word	0x40000800

0800180c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800182a:	4b1e      	ldr	r3, [pc, #120]	@ (80018a4 <MX_TIM5_Init+0x98>)
 800182c:	4a1e      	ldr	r2, [pc, #120]	@ (80018a8 <MX_TIM5_Init+0x9c>)
 800182e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40000 - 1;
 8001830:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_TIM5_Init+0x98>)
 8001832:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001836:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_TIM5_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 30000 - 1;
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <MX_TIM5_Init+0x98>)
 8001840:	f247 522f 	movw	r2, #29999	@ 0x752f
 8001844:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_TIM5_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_TIM5_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001852:	4814      	ldr	r0, [pc, #80]	@ (80018a4 <MX_TIM5_Init+0x98>)
 8001854:	f002 ff0c 	bl	8004670 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800185e:	f7ff fb17 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4619      	mov	r1, r3
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_TIM5_Init+0x98>)
 8001870:	f003 f98c 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800187a:	f7ff fb09 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <MX_TIM5_Init+0x98>)
 800188c:	f003 fbb0 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001896:	f7ff fafb 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200005d0 	.word	0x200005d0
 80018a8:	40000c00 	.word	0x40000c00

080018ac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0310 	add.w	r3, r7, #16
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018cc:	4a1f      	ldr	r2, [pc, #124]	@ (800194c <MX_TIM15_Init+0xa0>)
 80018ce:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 40000 - 1;
 80018d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018d2:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80018d6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 60000 - 1;
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018e0:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80018e4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80018f8:	4813      	ldr	r0, [pc, #76]	@ (8001948 <MX_TIM15_Init+0x9c>)
 80018fa:	f002 feb9 	bl	8004670 <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001904:	f7ff fac4 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800190c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	@ (8001948 <MX_TIM15_Init+0x9c>)
 8001916:	f003 f939 	bl	8004b8c <HAL_TIM_ConfigClockSource>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001920:	f7ff fab6 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	@ (8001948 <MX_TIM15_Init+0x9c>)
 8001932:	f003 fb5d 	bl	8004ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800193c:	f7ff faa8 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000061c 	.word	0x2000061c
 800194c:	40014000 	.word	0x40014000

08001950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a30      	ldr	r2, [pc, #192]	@ (8001a20 <HAL_TIM_Base_MspInit+0xd0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d114      	bne.n	800198c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001962:	4b30      	ldr	r3, [pc, #192]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001966:	4a2f      	ldr	r2, [pc, #188]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6593      	str	r3, [r2, #88]	@ 0x58
 800196e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800197a:	2200      	movs	r2, #0
 800197c:	2101      	movs	r1, #1
 800197e:	201d      	movs	r0, #29
 8001980:	f000 fdaf 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001984:	201d      	movs	r0, #29
 8001986:	f000 fdc8 	bl	800251a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800198a:	e044      	b.n	8001a16 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM4)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a25      	ldr	r2, [pc, #148]	@ (8001a28 <HAL_TIM_Base_MspInit+0xd8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d10c      	bne.n	80019b0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001996:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a22      	ldr	r2, [pc, #136]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
}
 80019ae:	e032      	b.n	8001a16 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM5)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <HAL_TIM_Base_MspInit+0xdc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d114      	bne.n	80019e4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019be:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	f003 0308 	and.w	r3, r3, #8
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2101      	movs	r1, #1
 80019d6:	2032      	movs	r0, #50	@ 0x32
 80019d8:	f000 fd83 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019dc:	2032      	movs	r0, #50	@ 0x32
 80019de:	f000 fd9c 	bl	800251a <HAL_NVIC_EnableIRQ>
}
 80019e2:	e018      	b.n	8001a16 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM15)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a11      	ldr	r2, [pc, #68]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d113      	bne.n	8001a16 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80019ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <HAL_TIM_Base_MspInit+0xd4>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2101      	movs	r1, #1
 8001a0a:	2018      	movs	r0, #24
 8001a0c:	f000 fd69 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001a10:	2018      	movs	r0, #24
 8001a12:	f000 fd82 	bl	800251a <HAL_NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40000800 	.word	0x40000800
 8001a2c:	40000c00 	.word	0x40000c00
 8001a30:	40014000 	.word	0x40014000

08001a34 <Traffic>:
  Wait20s,
  Wait30s,
} states;
static states State, NextState;

void Traffic(void) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    init_program();
 8001a38:	f000 fa5a 	bl	8001ef0 <init_program>
    State = Intersection2;
 8001a3c:	4ba9      	ldr	r3, [pc, #676]	@ (8001ce4 <Traffic+0x2b0>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
    NextState = Intersection2;
 8001a42:	4ba9      	ldr	r3, [pc, #676]	@ (8001ce8 <Traffic+0x2b4>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]

    while (1) {
        State = NextState;
 8001a48:	4ba7      	ldr	r3, [pc, #668]	@ (8001ce8 <Traffic+0x2b4>)
 8001a4a:	781a      	ldrb	r2, [r3, #0]
 8001a4c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ce4 <Traffic+0x2b0>)
 8001a4e:	701a      	strb	r2, [r3, #0]

        switch (State) {
 8001a50:	4ba4      	ldr	r3, [pc, #656]	@ (8001ce4 <Traffic+0x2b0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d8f7      	bhi.n	8001a48 <Traffic+0x14>
 8001a58:	a201      	add	r2, pc, #4	@ (adr r2, 8001a60 <Traffic+0x2c>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a71 	.word	0x08001a71
 8001a64:	08001bcd 	.word	0x08001bcd
 8001a68:	08001d65 	.word	0x08001d65
 8001a6c:	08001df5 	.word	0x08001df5
            case Intersection1: {
                static uint8_t stage = 0;

                /* Stage 0: If switching from an active intersection to an inactive */
                if (stage == 0) {
 8001a70:	4b9e      	ldr	r3, [pc, #632]	@ (8001cec <Traffic+0x2b8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d12e      	bne.n	8001ad6 <Traffic+0xa2>
                    /* If Intersection1 already is green, skip this stage */
                    if (intersection1_green) {
 8001a78:	4b9d      	ldr	r3, [pc, #628]	@ (8001cf0 <Traffic+0x2bc>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <Traffic+0x56>
                        stage = 1;
 8001a82:	4b9a      	ldr	r3, [pc, #616]	@ (8001cec <Traffic+0x2b8>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
                        break;
 8001a88:	e221      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* Stop active Intersection2 */
                    if (!intersection2_red) {
 8001a8a:	4b9a      	ldr	r3, [pc, #616]	@ (8001cf4 <Traffic+0x2c0>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	f083 0301 	eor.w	r3, r3, #1
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <Traffic+0x6c>
                        stop_intersection(2);
 8001a9a:	2002      	movs	r0, #2
 8001a9c:	f7fe ff4a 	bl	8000934 <stop_intersection>
                    }

                    /* 5s after cars are stopped, allow pedestrians to walk across inactive lane */
                    if (intersection2_red && __HAL_TIM_GetCounter(&htim4) >= pedestrian_Delay) {  
 8001aa0:	4b94      	ldr	r3, [pc, #592]	@ (8001cf4 <Traffic+0x2c0>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d0ce      	beq.n	8001a48 <Traffic+0x14>
 8001aaa:	4b93      	ldr	r3, [pc, #588]	@ (8001cf8 <Traffic+0x2c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab0:	f242 6245 	movw	r2, #9797	@ 0x2645
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d9c7      	bls.n	8001a48 <Traffic+0x14>
                        stop_and_resetTimer(&htim4);
 8001ab8:	488f      	ldr	r0, [pc, #572]	@ (8001cf8 <Traffic+0x2c4>)
 8001aba:	f000 fa61 	bl	8001f80 <stop_and_resetTimer>
                        stop_pedestrian(1);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7fe fe42 	bl	8000748 <stop_pedestrian>
                        go_pedestrian(2);
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7fe fdcf 	bl	8000668 <go_pedestrian>
                        HAL_TIM_Base_Start(&htim4);
 8001aca:	488b      	ldr	r0, [pc, #556]	@ (8001cf8 <Traffic+0x2c4>)
 8001acc:	f002 fe28 	bl	8004720 <HAL_TIM_Base_Start>
                        stage = 1;
 8001ad0:	4b86      	ldr	r3, [pc, #536]	@ (8001cec <Traffic+0x2b8>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
                        break;
                    }
                }

                /* Stage 1: If not already, turn on Intersection1 */
                if (stage == 1 && crosswalk1_red) {
 8001ad6:	4b85      	ldr	r3, [pc, #532]	@ (8001cec <Traffic+0x2b8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d11d      	bne.n	8001b1a <Traffic+0xe6>
 8001ade:	4b87      	ldr	r3, [pc, #540]	@ (8001cfc <Traffic+0x2c8>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d018      	beq.n	8001b1a <Traffic+0xe6>
                    if (!intersection1_green) {
 8001ae8:	4b81      	ldr	r3, [pc, #516]	@ (8001cf0 <Traffic+0x2bc>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f083 0301 	eor.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <Traffic+0xcc>
                        go_intersection(1);
 8001af8:	2001      	movs	r0, #1
 8001afa:	f7fe fe83 	bl	8000804 <go_intersection>
                    } else if (intersection1_green) {
                        stop_and_resetTimer(&htim4);
                        stage = 2;
                    }
                    break;
 8001afe:	e1de      	b.n	8001ebe <Traffic+0x48a>
                    } else if (intersection1_green) {
 8001b00:	4b7b      	ldr	r3, [pc, #492]	@ (8001cf0 <Traffic+0x2bc>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 81d9 	beq.w	8001ebe <Traffic+0x48a>
                        stop_and_resetTimer(&htim4);
 8001b0c:	487a      	ldr	r0, [pc, #488]	@ (8001cf8 <Traffic+0x2c4>)
 8001b0e:	f000 fa37 	bl	8001f80 <stop_and_resetTimer>
                        stage = 2;
 8001b12:	4b76      	ldr	r3, [pc, #472]	@ (8001cec <Traffic+0x2b8>)
 8001b14:	2202      	movs	r2, #2
 8001b16:	701a      	strb	r2, [r3, #0]
                    break;
 8001b18:	e1d1      	b.n	8001ebe <Traffic+0x48a>
                } 

                /* Stage 2: If/when Intersection1 is green, check the following */
                if (stage == 2) {
 8001b1a:	4b74      	ldr	r3, [pc, #464]	@ (8001cec <Traffic+0x2b8>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d154      	bne.n	8001bcc <Traffic+0x198>
                
                    /* Pedestrain waiting? */
                    if (PL1_SW_HIT) {
 8001b22:	4b77      	ldr	r3, [pc, #476]	@ (8001d00 <Traffic+0x2cc>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d006      	beq.n	8001b3a <Traffic+0x106>
                        NextState = Intersection2;
 8001b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ce8 <Traffic+0x2b4>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
                        stage = 0;
 8001b32:	4b6e      	ldr	r3, [pc, #440]	@ (8001cec <Traffic+0x2b8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
                        break;
 8001b38:	e1c9      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* Any active cars at all? */
                    if (no_active_cars()) {
 8001b3a:	f000 fa31 	bl	8001fa0 <no_active_cars>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <Traffic+0x124>
                        NextState = Wait30s;
 8001b44:	4b68      	ldr	r3, [pc, #416]	@ (8001ce8 <Traffic+0x2b4>)
 8001b46:	2203      	movs	r2, #3
 8001b48:	701a      	strb	r2, [r3, #0]
                        stage = 0;
 8001b4a:	4b68      	ldr	r3, [pc, #416]	@ (8001cec <Traffic+0x2b8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim15);
 8001b50:	486c      	ldr	r0, [pc, #432]	@ (8001d04 <Traffic+0x2d0>)
 8001b52:	f002 fde5 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001b56:	e1ba      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* If there are active cars at the active Intersection */
                    if (active_cars_at(1)) {
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 fa53 	bl	8002004 <active_cars_at>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <Traffic+0x158>
                        /* If cars are also waiting at red light */
                        if (active_cars_at(2)) {
 8001b64:	2002      	movs	r0, #2
 8001b66:	f000 fa4d 	bl	8002004 <active_cars_at>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <Traffic+0x150>
                        NextState = Wait20s;
 8001b70:	4b5d      	ldr	r3, [pc, #372]	@ (8001ce8 <Traffic+0x2b4>)
 8001b72:	2202      	movs	r2, #2
 8001b74:	701a      	strb	r2, [r3, #0]
                        stage = 0;
 8001b76:	4b5d      	ldr	r3, [pc, #372]	@ (8001cec <Traffic+0x2b8>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim15);
 8001b7c:	4861      	ldr	r0, [pc, #388]	@ (8001d04 <Traffic+0x2d0>)
 8001b7e:	f002 fdcf 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001b82:	e1a4      	b.n	8001ece <Traffic+0x49a>
                        } else { // No cars are waiting at a red light
                            stage = 2;
 8001b84:	4b59      	ldr	r3, [pc, #356]	@ (8001cec <Traffic+0x2b8>)
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
                            break;
 8001b8a:	e1a0      	b.n	8001ece <Traffic+0x49a>
                        }
                    }

                    /* No active cars at the active Intersection, but cars waiting at inactive Intersection */
                    if (!(active_cars_at(1)) && (active_cars_at(2))) {
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 fa39 	bl	8002004 <active_cars_at>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00f      	beq.n	8001bbe <Traffic+0x18a>
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f000 fa30 	bl	8002004 <active_cars_at>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <Traffic+0x18a>
                        NextState = Intersection2;
 8001baa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ce8 <Traffic+0x2b4>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
                        stage = 0;
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <Traffic+0x2b8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim4);
 8001bb6:	4850      	ldr	r0, [pc, #320]	@ (8001cf8 <Traffic+0x2c4>)
 8001bb8:	f002 fdb2 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001bbc:	e187      	b.n	8001ece <Traffic+0x49a>
                    } else {
                        NextState = Intersection1;
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce8 <Traffic+0x2b4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
                        stage = 2;
 8001bc4:	4b49      	ldr	r3, [pc, #292]	@ (8001cec <Traffic+0x2b8>)
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8001bca:	e180      	b.n	8001ece <Traffic+0x49a>

            case Intersection2: {
                static uint8_t stage = 0;
                
                /* Stage 0: If switching from an active intersection to an inactive */
                if (stage == 0) {
 8001bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8001d08 <Traffic+0x2d4>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d130      	bne.n	8001c36 <Traffic+0x202>
                    /* If Intersection2 already is green, skip this stage */
                    if (intersection2_green) {
 8001bd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d0c <Traffic+0x2d8>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <Traffic+0x1b2>
                        stage = 1;
 8001bde:	4b4a      	ldr	r3, [pc, #296]	@ (8001d08 <Traffic+0x2d4>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
                        break;
 8001be4:	e173      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* Stop active Intersection1 */
                    if (!intersection1_red) {
 8001be6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <Traffic+0x2dc>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f083 0301 	eor.w	r3, r3, #1
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <Traffic+0x1c8>
                        stop_intersection(1);
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7fe fe9c 	bl	8000934 <stop_intersection>
                    } 

                    /* 5s after cars are stopped, allow pedestrians to walk across inactive lane  */
                    if (intersection1_red && __HAL_TIM_GetCounter(&htim4) >= pedestrian_Delay) {            
 8001bfc:	4b44      	ldr	r3, [pc, #272]	@ (8001d10 <Traffic+0x2dc>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f43f af20 	beq.w	8001a48 <Traffic+0x14>
 8001c08:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <Traffic+0x2c4>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	f242 6245 	movw	r2, #9797	@ 0x2645
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f67f af18 	bls.w	8001a48 <Traffic+0x14>
                        stop_and_resetTimer(&htim4);
 8001c18:	4837      	ldr	r0, [pc, #220]	@ (8001cf8 <Traffic+0x2c4>)
 8001c1a:	f000 f9b1 	bl	8001f80 <stop_and_resetTimer>
                        stop_pedestrian(2);
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f7fe fd92 	bl	8000748 <stop_pedestrian>
                        go_pedestrian(1);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7fe fd1f 	bl	8000668 <go_pedestrian>
                        HAL_TIM_Base_Start(&htim4);
 8001c2a:	4833      	ldr	r0, [pc, #204]	@ (8001cf8 <Traffic+0x2c4>)
 8001c2c:	f002 fd78 	bl	8004720 <HAL_TIM_Base_Start>
                        stage = 1;
 8001c30:	4b35      	ldr	r3, [pc, #212]	@ (8001d08 <Traffic+0x2d4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
                        break;
                    }
                }

                /* Stage 1: If not already, turn on Intersection2 */
                if (stage == 1 && crosswalk2_red) {
 8001c36:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <Traffic+0x2d4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d11d      	bne.n	8001c7a <Traffic+0x246>
 8001c3e:	4b35      	ldr	r3, [pc, #212]	@ (8001d14 <Traffic+0x2e0>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d018      	beq.n	8001c7a <Traffic+0x246>
                    if (!intersection2_green) {
 8001c48:	4b30      	ldr	r3, [pc, #192]	@ (8001d0c <Traffic+0x2d8>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <Traffic+0x22c>
                        go_intersection(2);
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7fe fdd3 	bl	8000804 <go_intersection>
                    } else if (intersection2_green) {
                        stop_and_resetTimer(&htim4);
                        stage = 2;
                    }
                    break;
 8001c5e:	e130      	b.n	8001ec2 <Traffic+0x48e>
                    } else if (intersection2_green) {
 8001c60:	4b2a      	ldr	r3, [pc, #168]	@ (8001d0c <Traffic+0x2d8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 812b 	beq.w	8001ec2 <Traffic+0x48e>
                        stop_and_resetTimer(&htim4);
 8001c6c:	4822      	ldr	r0, [pc, #136]	@ (8001cf8 <Traffic+0x2c4>)
 8001c6e:	f000 f987 	bl	8001f80 <stop_and_resetTimer>
                        stage = 2;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <Traffic+0x2d4>)
 8001c74:	2202      	movs	r2, #2
 8001c76:	701a      	strb	r2, [r3, #0]
                    break;
 8001c78:	e123      	b.n	8001ec2 <Traffic+0x48e>
                } 

                /* Stage 2: If/when Intersection2 is green, check the following */
                if (stage == 2) {
 8001c7a:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <Traffic+0x2d4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d170      	bne.n	8001d64 <Traffic+0x330>
                    
                    /* Pedestrain waiting? */
                    if (PL2_SW_HIT) {
 8001c82:	4b25      	ldr	r3, [pc, #148]	@ (8001d18 <Traffic+0x2e4>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <Traffic+0x266>
                        NextState = Intersection1;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <Traffic+0x2b4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
                        stage = 0;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <Traffic+0x2d4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
                        break;
 8001c98:	e119      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* Any active cars at all? */
                    if (no_active_cars()) {
 8001c9a:	f000 f981 	bl	8001fa0 <no_active_cars>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <Traffic+0x284>
                        NextState = Wait30s;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <Traffic+0x2b4>)
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	701a      	strb	r2, [r3, #0]
                        stage = 0;
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <Traffic+0x2d4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim15);
 8001cb0:	4814      	ldr	r0, [pc, #80]	@ (8001d04 <Traffic+0x2d0>)
 8001cb2:	f002 fd35 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001cb6:	e10a      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* If there are active cars at the active Intersection*/
                    if (active_cars_at(2)) {
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f000 f9a3 	bl	8002004 <active_cars_at>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02f      	beq.n	8001d24 <Traffic+0x2f0>
                        /* If cars are also waiting at red light */
                        if (active_cars_at(1)) {
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f000 f99d 	bl	8002004 <active_cars_at>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d025      	beq.n	8001d1c <Traffic+0x2e8>
                        NextState = Wait20s;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <Traffic+0x2b4>)
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
                        stage = 0,
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <Traffic+0x2d4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim15);
 8001cdc:	4809      	ldr	r0, [pc, #36]	@ (8001d04 <Traffic+0x2d0>)
 8001cde:	f002 fd1f 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001ce2:	e0f4      	b.n	8001ece <Traffic+0x49a>
 8001ce4:	20000668 	.word	0x20000668
 8001ce8:	20000669 	.word	0x20000669
 8001cec:	2000066a 	.word	0x2000066a
 8001cf0:	20000033 	.word	0x20000033
 8001cf4:	20000034 	.word	0x20000034
 8001cf8:	20000584 	.word	0x20000584
 8001cfc:	2000002f 	.word	0x2000002f
 8001d00:	20000031 	.word	0x20000031
 8001d04:	2000061c 	.word	0x2000061c
 8001d08:	2000066b 	.word	0x2000066b
 8001d0c:	20000003 	.word	0x20000003
 8001d10:	20000002 	.word	0x20000002
 8001d14:	20000001 	.word	0x20000001
 8001d18:	20000032 	.word	0x20000032
                        } else { // No cars are waiting at a red light
                            stage = 2;
 8001d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed0 <Traffic+0x49c>)
 8001d1e:	2202      	movs	r2, #2
 8001d20:	701a      	strb	r2, [r3, #0]
                            break;
 8001d22:	e0d4      	b.n	8001ece <Traffic+0x49a>
                        }
                    }

                    /* No active cars at the active Intersection, but cars waiting at inactive Intersection */
                    if (!(active_cars_at(2)) && (active_cars_at(1))) {
 8001d24:	2002      	movs	r0, #2
 8001d26:	f000 f96d 	bl	8002004 <active_cars_at>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00f      	beq.n	8001d56 <Traffic+0x322>
 8001d36:	2001      	movs	r0, #1
 8001d38:	f000 f964 	bl	8002004 <active_cars_at>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d009      	beq.n	8001d56 <Traffic+0x322>
                        NextState =Intersection1;
 8001d42:	4b64      	ldr	r3, [pc, #400]	@ (8001ed4 <Traffic+0x4a0>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
                        stage = 0;
 8001d48:	4b61      	ldr	r3, [pc, #388]	@ (8001ed0 <Traffic+0x49c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim4);
 8001d4e:	4862      	ldr	r0, [pc, #392]	@ (8001ed8 <Traffic+0x4a4>)
 8001d50:	f002 fce6 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001d54:	e0bb      	b.n	8001ece <Traffic+0x49a>
                    } else {
                        NextState = Intersection2;
 8001d56:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <Traffic+0x4a0>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
                        stage = 2;
 8001d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed0 <Traffic+0x49c>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	701a      	strb	r2, [r3, #0]
                    }
                    break;
 8001d62:	e0b4      	b.n	8001ece <Traffic+0x49a>
            }

            /* You'll only end up here if there are active cars at the intersection and at the inactive Intersection */
            case Wait20s:
                /* If PL1_SW is pressed while wating interesction1 is active, transition immideately */
                if (PL1_SW_HIT && intersection1_green) {
 8001d64:	4b5d      	ldr	r3, [pc, #372]	@ (8001edc <Traffic+0x4a8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <Traffic+0x352>
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee0 <Traffic+0x4ac>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d006      	beq.n	8001d86 <Traffic+0x352>
                    stop_and_resetTimer(&htim15);
 8001d78:	485a      	ldr	r0, [pc, #360]	@ (8001ee4 <Traffic+0x4b0>)
 8001d7a:	f000 f901 	bl	8001f80 <stop_and_resetTimer>
                    NextState = Intersection2;
 8001d7e:	4b55      	ldr	r3, [pc, #340]	@ (8001ed4 <Traffic+0x4a0>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
                    break; /* If PL1_SW is pressed while intersection2 is active, turn on crosswalk1 after 5s */
 8001d84:	e0a3      	b.n	8001ece <Traffic+0x49a>
                } 

                /* If PL2_SW is pressed while waiting interesction2 is active, transition immideately */
                if (PL2_SW_HIT && intersection2_green) {
 8001d86:	4b58      	ldr	r3, [pc, #352]	@ (8001ee8 <Traffic+0x4b4>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00b      	beq.n	8001da8 <Traffic+0x374>
 8001d90:	4b56      	ldr	r3, [pc, #344]	@ (8001eec <Traffic+0x4b8>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d006      	beq.n	8001da8 <Traffic+0x374>
                    stop_and_resetTimer(&htim15);
 8001d9a:	4852      	ldr	r0, [pc, #328]	@ (8001ee4 <Traffic+0x4b0>)
 8001d9c:	f000 f8f0 	bl	8001f80 <stop_and_resetTimer>
                    NextState = Intersection1;
 8001da0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed4 <Traffic+0x4a0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
                    break; /* If PL2_SW is pressed while intersection1 is active, turn on crosswalk2 after 5s */
 8001da6:	e092      	b.n	8001ece <Traffic+0x49a>
                } 

                /* Waits ~ 5s (transition_time = 15s => total time = 20s) */
                if (__HAL_TIM_GetCounter(&htim15) >= red_delay_Max) {
 8001da8:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <Traffic+0x4b0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	f242 62aa 	movw	r2, #9898	@ 0x26aa
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d91a      	bls.n	8001dec <Traffic+0x3b8>
                    stop_and_resetTimer(&htim15);
 8001db6:	484b      	ldr	r0, [pc, #300]	@ (8001ee4 <Traffic+0x4b0>)
 8001db8:	f000 f8e2 	bl	8001f80 <stop_and_resetTimer>

                    /* If the Intersection before, entering wait was 1, It's the 2:nd Intersections turn */
                    if (intersection1_green) {
 8001dbc:	4b48      	ldr	r3, [pc, #288]	@ (8001ee0 <Traffic+0x4ac>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <Traffic+0x3a0>
                        NextState = Intersection2;
 8001dc6:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <Traffic+0x4a0>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim4);
 8001dcc:	4842      	ldr	r0, [pc, #264]	@ (8001ed8 <Traffic+0x4a4>)
 8001dce:	f002 fca7 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001dd2:	e07c      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* Vice versa ^^ */
                    if (intersection2_green) {
 8001dd4:	4b45      	ldr	r3, [pc, #276]	@ (8001eec <Traffic+0x4b8>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d073      	beq.n	8001ec6 <Traffic+0x492>
                        NextState = Intersection1;
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <Traffic+0x4a0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim4);
 8001de4:	483c      	ldr	r0, [pc, #240]	@ (8001ed8 <Traffic+0x4a4>)
 8001de6:	f002 fc9b 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001dea:	e070      	b.n	8001ece <Traffic+0x49a>
                    }
                } else {
                    NextState = Wait20s;
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <Traffic+0x4a0>)
 8001dee:	2202      	movs	r2, #2
 8001df0:	701a      	strb	r2, [r3, #0]
                }
            break;
 8001df2:	e068      	b.n	8001ec6 <Traffic+0x492>

            /* You'll only end up here if there are no active cars at a green intersection */
            case Wait30s:
                /* A car is active, go back and check what should be done */
                if (!no_active_cars()) {
 8001df4:	f000 f8d4 	bl	8001fa0 <no_active_cars>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d014      	beq.n	8001e2e <Traffic+0x3fa>
                    stop_and_resetTimer(&htim15);
 8001e04:	4837      	ldr	r0, [pc, #220]	@ (8001ee4 <Traffic+0x4b0>)
 8001e06:	f000 f8bb 	bl	8001f80 <stop_and_resetTimer>
                    if (intersection1_green) {
 8001e0a:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <Traffic+0x4ac>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <Traffic+0x3e8>
                        NextState = Intersection1;
 8001e14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed4 <Traffic+0x4a0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
                        break;
 8001e1a:	e058      	b.n	8001ece <Traffic+0x49a>
                    } else if (intersection2_green) {
 8001e1c:	4b33      	ldr	r3, [pc, #204]	@ (8001eec <Traffic+0x4b8>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <Traffic+0x3fa>
                        NextState = Intersection2;
 8001e26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <Traffic+0x4a0>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
                        break;
 8001e2c:	e04f      	b.n	8001ece <Traffic+0x49a>
                    }
                }

                /* If PL1_SW is pressed while wating interesction1 is active, transition immideately */
                if (PL1_SW_HIT && intersection1_green) {
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001edc <Traffic+0x4a8>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00b      	beq.n	8001e50 <Traffic+0x41c>
 8001e38:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <Traffic+0x4ac>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d006      	beq.n	8001e50 <Traffic+0x41c>
                    stop_and_resetTimer(&htim15);
 8001e42:	4828      	ldr	r0, [pc, #160]	@ (8001ee4 <Traffic+0x4b0>)
 8001e44:	f000 f89c 	bl	8001f80 <stop_and_resetTimer>
                    NextState = Intersection2;
 8001e48:	4b22      	ldr	r3, [pc, #136]	@ (8001ed4 <Traffic+0x4a0>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
                    break; /* If PL1_SW is pressed while intersection2 is active, turn on crosswalk1 after 5s */
 8001e4e:	e03e      	b.n	8001ece <Traffic+0x49a>
                } 

                /* If PL2_SW is pressed while waiting interesction2 is active, transition immideately */
                if (PL2_SW_HIT && intersection2_green) {
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <Traffic+0x4b4>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00b      	beq.n	8001e72 <Traffic+0x43e>
 8001e5a:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <Traffic+0x4b8>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <Traffic+0x43e>
                    stop_and_resetTimer(&htim15);
 8001e64:	481f      	ldr	r0, [pc, #124]	@ (8001ee4 <Traffic+0x4b0>)
 8001e66:	f000 f88b 	bl	8001f80 <stop_and_resetTimer>
                    NextState = Intersection1;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <Traffic+0x4a0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
                    break; /* If PL2_SW is pressed while intersection1 is active, turn on crosswalk2 after 5s */
 8001e70:	e02d      	b.n	8001ece <Traffic+0x49a>
                } 

                /* Waits ~15s (transition_time = 15s => total time = 30s) */
                if (__HAL_TIM_GetCounter(&htim15) >= green_Delay) {
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <Traffic+0x4b0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e78:	f247 42ca 	movw	r2, #29898	@ 0x74ca
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d91a      	bls.n	8001eb6 <Traffic+0x482>
                    stop_and_resetTimer(&htim15);
 8001e80:	4818      	ldr	r0, [pc, #96]	@ (8001ee4 <Traffic+0x4b0>)
 8001e82:	f000 f87d 	bl	8001f80 <stop_and_resetTimer>
                    
                    /* Intersection1 was active before the wait, now switch intersection */
                    if (intersection1_green) {
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <Traffic+0x4ac>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <Traffic+0x46a>
                        NextState = Intersection2;
 8001e90:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <Traffic+0x4a0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim4);
 8001e96:	4810      	ldr	r0, [pc, #64]	@ (8001ed8 <Traffic+0x4a4>)
 8001e98:	f002 fc42 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001e9c:	e017      	b.n	8001ece <Traffic+0x49a>
                    }

                    /* Intersection2 was active before the wait, now switch intersection */
                    if (intersection2_green) {
 8001e9e:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <Traffic+0x4b8>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d010      	beq.n	8001eca <Traffic+0x496>
                        NextState = Intersection1;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <Traffic+0x4a0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
                        HAL_TIM_Base_Start(&htim4);
 8001eae:	480a      	ldr	r0, [pc, #40]	@ (8001ed8 <Traffic+0x4a4>)
 8001eb0:	f002 fc36 	bl	8004720 <HAL_TIM_Base_Start>
                        break;
 8001eb4:	e00b      	b.n	8001ece <Traffic+0x49a>
                    }

                } else {
                    NextState = Wait30s;
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <Traffic+0x4a0>)
 8001eb8:	2203      	movs	r2, #3
 8001eba:	701a      	strb	r2, [r3, #0]
                }
            break;
 8001ebc:	e005      	b.n	8001eca <Traffic+0x496>
                    break;
 8001ebe:	bf00      	nop
 8001ec0:	e5c2      	b.n	8001a48 <Traffic+0x14>
                    break;
 8001ec2:	bf00      	nop
 8001ec4:	e5c0      	b.n	8001a48 <Traffic+0x14>
            break;
 8001ec6:	bf00      	nop
 8001ec8:	e5be      	b.n	8001a48 <Traffic+0x14>
            break;
 8001eca:	bf00      	nop
 8001ecc:	e5bc      	b.n	8001a48 <Traffic+0x14>
        State = NextState;
 8001ece:	e5bb      	b.n	8001a48 <Traffic+0x14>
 8001ed0:	2000066b 	.word	0x2000066b
 8001ed4:	20000669 	.word	0x20000669
 8001ed8:	20000584 	.word	0x20000584
 8001edc:	20000031 	.word	0x20000031
 8001ee0:	20000033 	.word	0x20000033
 8001ee4:	2000061c 	.word	0x2000061c
 8001ee8:	20000032 	.word	0x20000032
 8001eec:	20000003 	.word	0x20000003

08001ef0 <init_program>:
 * @version  1.0
 * @param    None
 * @return   None
 * @see      595_shiftreg.c/.h, ssd1306_config.c/.h and stm32l4xx_it.c
 *****************************************************************************/
void init_program(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* init screen */
  init_OLED();
 8001ef4:	f7ff fa7e 	bl	80013f4 <init_OLED>
  clear_screen();
 8001ef8:	f7ff fad4 	bl	80014a4 <clear_screen>
  /* init shift registers and it's start-state */
  reset_595register();
 8001efc:	f7fe fadc 	bl	80004b8 <reset_595register>
  update_shiftreg_buffer(init_state);
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <init_program+0x70>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb1b 	bl	8000540 <update_shiftreg_buffer>
  buffer_to_SPI();
 8001f0a:	f7fe faf9 	bl	8000500 <buffer_to_SPI>

  /* Timer init */
  __HAL_TIM_SetCounter(&htim5, 0); // Reset counter
 8001f0e:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <init_program+0x74>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2200      	movs	r2, #0
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE); // Clear interrupt flag
 8001f16:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <init_program+0x74>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0201 	mvn.w	r2, #1
 8001f1e:	611a      	str	r2, [r3, #16]

  /* Display at start */
  draw_string(0, 0, "No pedestrian");
 8001f20:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <init_program+0x78>)
 8001f22:	2100      	movs	r1, #0
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff fb05 	bl	8001534 <draw_string>
  draw_string(0, 8, "       is waiting..");
 8001f2a:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <init_program+0x7c>)
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f7ff fb00 	bl	8001534 <draw_string>
  draw_string(0, 31, "Car1 inactive");
 8001f34:	4a0e      	ldr	r2, [pc, #56]	@ (8001f70 <init_program+0x80>)
 8001f36:	211f      	movs	r1, #31
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f7ff fafb 	bl	8001534 <draw_string>
  draw_string(0, 39, "Car2 inactive");
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <init_program+0x84>)
 8001f40:	2127      	movs	r1, #39	@ 0x27
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7ff faf6 	bl	8001534 <draw_string>
  draw_string(0, 47, "Car3 inactive");
 8001f48:	4a0b      	ldr	r2, [pc, #44]	@ (8001f78 <init_program+0x88>)
 8001f4a:	212f      	movs	r1, #47	@ 0x2f
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff faf1 	bl	8001534 <draw_string>
  draw_string(0, 55, "Car4 inactive");
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <init_program+0x8c>)
 8001f54:	2137      	movs	r1, #55	@ 0x37
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff faec 	bl	8001534 <draw_string>
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	08005da4 	.word	0x08005da4
 8001f64:	200005d0 	.word	0x200005d0
 8001f68:	08005d40 	.word	0x08005d40
 8001f6c:	08005d50 	.word	0x08005d50
 8001f70:	08005d64 	.word	0x08005d64
 8001f74:	08005d74 	.word	0x08005d74
 8001f78:	08005d84 	.word	0x08005d84
 8001f7c:	08005d94 	.word	0x08005d94

08001f80 <stop_and_resetTimer>:
 * @version  1.0
 * @param    TIM_HandleTypeDef *htim_x, specifies the timer to reset.
 * @return   None
 * @note     This function only works for Polling Timers and not Interrupt-Driven Timers!
 *****************************************************************************/
void stop_and_resetTimer(TIM_HandleTypeDef *htim_x) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Stop(htim_x);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f002 fc31 	bl	80047f0 <HAL_TIM_Base_Stop>
  __HAL_TIM_SetCounter(htim_x, 0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <no_active_cars>:
 *           active car.
 * @version  1.0
 * @param    None
 * @return   boolean 
 *****************************************************************************/
bool no_active_cars(void) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  if (!car1_active && !car2_active && !car3_active && !car4_active) {
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <no_active_cars+0x54>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f083 0301 	eor.w	r3, r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d019      	beq.n	8001fe8 <no_active_cars+0x48>
 8001fb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <no_active_cars+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d011      	beq.n	8001fe8 <no_active_cars+0x48>
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ffc <no_active_cars+0x5c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <no_active_cars+0x48>
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <no_active_cars+0x60>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <no_active_cars+0x48>
    return 1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <no_active_cars+0x4a>
  } else {
    return 0;
 8001fe8:	2300      	movs	r3, #0
  }
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	2000066c 	.word	0x2000066c
 8001ff8:	2000066d 	.word	0x2000066d
 8001ffc:	2000066e 	.word	0x2000066e
 8002000:	2000066f 	.word	0x2000066f

08002004 <active_cars_at>:
 * @param    uint8_t intersection, the intersection identifier (1 or 2).
 * @return   boolean
 * @note     This function will not work properly if an identifier other than
 *           1 or 2 is entered .
 *****************************************************************************/
bool active_cars_at(uint8_t intersection) {
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  bool status = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  if (intersection == 1) {
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d110      	bne.n	800203a <active_cars_at+0x36>
    (car1_active || car3_active) ? (status = 1) : (status = 0);
 8002018:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <active_cars_at+0x6c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d104      	bne.n	800202c <active_cars_at+0x28>
 8002022:	4b14      	ldr	r3, [pc, #80]	@ (8002074 <active_cars_at+0x70>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <active_cars_at+0x2e>
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
 8002030:	e001      	b.n	8002036 <active_cars_at+0x32>
 8002032:	2300      	movs	r3, #0
 8002034:	73fb      	strb	r3, [r7, #15]
    return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	e014      	b.n	8002064 <active_cars_at+0x60>
  } else if (intersection == 2) {
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d110      	bne.n	8002062 <active_cars_at+0x5e>
    (car2_active || car4_active) ? (status = 1) : (status = 0);
 8002040:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <active_cars_at+0x74>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d104      	bne.n	8002054 <active_cars_at+0x50>
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <active_cars_at+0x78>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <active_cars_at+0x56>
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <active_cars_at+0x5a>
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
    return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	e000      	b.n	8002064 <active_cars_at+0x60>
  } 
  return -1;
 8002062:	2301      	movs	r3, #1
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	2000066c 	.word	0x2000066c
 8002074:	2000066e 	.word	0x2000066e
 8002078:	2000066d 	.word	0x2000066d
 800207c:	2000066f 	.word	0x2000066f

08002080 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 8002086:	4a15      	ldr	r2, [pc, #84]	@ (80020dc <MX_USART2_UART_Init+0x5c>)
 8002088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <MX_USART2_UART_Init+0x58>)
 80020c4:	f003 f83a 	bl	800513c <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020ce:	f7fe fedf 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000670 	.word	0x20000670
 80020dc:	40004400 	.word	0x40004400

080020e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b0ac      	sub	sp, #176	@ 0xb0
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2288      	movs	r2, #136	@ 0x88
 80020fe:	2100      	movs	r1, #0
 8002100:	4618      	mov	r0, r3
 8002102:	f003 fd3c 	bl	8005b7e <memset>
  if(uartHandle->Instance==USART2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <HAL_UART_MspInit+0xb0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d13b      	bne.n	8002188 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002110:	2302      	movs	r3, #2
 8002112:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002114:	2300      	movs	r3, #0
 8002116:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4618      	mov	r0, r3
 800211e:	f001 fa6d 	bl	80035fc <HAL_RCCEx_PeriphCLKConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002128:	f7fe feb2 	bl	8000e90 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 8002132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002136:	6593      	str	r3, [r2, #88]	@ 0x58
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	4a12      	ldr	r2, [pc, #72]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002150:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <HAL_UART_MspInit+0xb4>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800215c:	230c      	movs	r3, #12
 800215e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002174:	2307      	movs	r3, #7
 8002176:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800217e:	4619      	mov	r1, r3
 8002180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002184:	f000 f9e4 	bl	8002550 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002188:	bf00      	nop
 800218a:	37b0      	adds	r7, #176	@ 0xb0
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40004400 	.word	0x40004400
 8002194:	40021000 	.word	0x40021000

08002198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800219c:	f7ff fa86 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <LoopForever+0xe>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	@ (80021e4 <LoopForever+0x16>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f003 fce3 	bl	8005b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ca:	f7fe ff6d 	bl	80010a8 <main>

080021ce <LoopForever>:

LoopForever:
    b LoopForever
 80021ce:	e7fe      	b.n	80021ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80021dc:	08005fdc 	.word	0x08005fdc
  ldr r2, =_sbss
 80021e0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80021e4:	200006fc 	.word	0x200006fc

080021e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_2_IRQHandler>
	...

080021ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_Init+0x3c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <HAL_Init+0x3c>)
 80021fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002200:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002202:	2003      	movs	r0, #3
 8002204:	f000 f962 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002208:	2000      	movs	r0, #0
 800220a:	f000 f80f 	bl	800222c <HAL_InitTick>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	e001      	b.n	800221e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800221a:	f7ff f9b3 	bl	8001584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800221e:	79fb      	ldrb	r3, [r7, #7]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40022000 	.word	0x40022000

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_InitTick+0x6c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d023      	beq.n	8002288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002240:	4b16      	ldr	r3, [pc, #88]	@ (800229c <HAL_InitTick+0x70>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <HAL_InitTick+0x6c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f96d 	bl	8002536 <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d809      	bhi.n	800227c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002270:	f000 f937 	bl	80024e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002274:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <HAL_InitTick+0x74>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e007      	b.n	800228c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	e004      	b.n	800228c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	e001      	b.n	800228c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000000c 	.word	0x2000000c
 800229c:	20000004 	.word	0x20000004
 80022a0:	20000008 	.word	0x20000008

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	@ (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	2000000c 	.word	0x2000000c
 80022c8:	200006f8 	.word	0x200006f8

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200006f8 	.word	0x200006f8

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000000c 	.word	0x2000000c

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002354:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235e:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	60d3      	str	r3, [r2, #12]
}
 8002364:	bf00      	nop
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	@ (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	@ (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	@ (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	@ (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	@ 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	@ 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	e17f      	b.n	8002860 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	4013      	ands	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8171 	beq.w	800285a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d005      	beq.n	8002590 <HAL_GPIO_Init+0x40>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d130      	bne.n	80025f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025c6:	2201      	movs	r2, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0201 	and.w	r2, r3, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d118      	bne.n	8002630 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002604:	2201      	movs	r2, #1
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	08db      	lsrs	r3, r3, #3
 800261a:	f003 0201 	and.w	r2, r3, #1
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b03      	cmp	r3, #3
 800263a:	d017      	beq.n	800266c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d123      	bne.n	80026c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	08da      	lsrs	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3208      	adds	r2, #8
 80026ba:	6939      	ldr	r1, [r7, #16]
 80026bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f003 0203 	and.w	r2, r3, #3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80ac 	beq.w	800285a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_GPIO_Init+0x330>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	4a5e      	ldr	r2, [pc, #376]	@ (8002880 <HAL_GPIO_Init+0x330>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6613      	str	r3, [r2, #96]	@ 0x60
 800270e:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <HAL_GPIO_Init+0x330>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800271a:	4a5a      	ldr	r2, [pc, #360]	@ (8002884 <HAL_GPIO_Init+0x334>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002744:	d025      	beq.n	8002792 <HAL_GPIO_Init+0x242>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a4f      	ldr	r2, [pc, #316]	@ (8002888 <HAL_GPIO_Init+0x338>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d01f      	beq.n	800278e <HAL_GPIO_Init+0x23e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4e      	ldr	r2, [pc, #312]	@ (800288c <HAL_GPIO_Init+0x33c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d019      	beq.n	800278a <HAL_GPIO_Init+0x23a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a4d      	ldr	r2, [pc, #308]	@ (8002890 <HAL_GPIO_Init+0x340>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0x236>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4c      	ldr	r2, [pc, #304]	@ (8002894 <HAL_GPIO_Init+0x344>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00d      	beq.n	8002782 <HAL_GPIO_Init+0x232>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4b      	ldr	r2, [pc, #300]	@ (8002898 <HAL_GPIO_Init+0x348>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d007      	beq.n	800277e <HAL_GPIO_Init+0x22e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4a      	ldr	r2, [pc, #296]	@ (800289c <HAL_GPIO_Init+0x34c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d101      	bne.n	800277a <HAL_GPIO_Init+0x22a>
 8002776:	2306      	movs	r3, #6
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800277a:	2307      	movs	r3, #7
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x244>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x244>
 8002792:	2300      	movs	r3, #0
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a4:	4937      	ldr	r1, [pc, #220]	@ (8002884 <HAL_GPIO_Init+0x334>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b2:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d6:	4a32      	ldr	r2, [pc, #200]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027dc:	4b30      	ldr	r3, [pc, #192]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002800:	4a27      	ldr	r2, [pc, #156]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002806:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43db      	mvns	r3, r3
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	4013      	ands	r3, r2
 8002814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800282a:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002830:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002854:	4a12      	ldr	r2, [pc, #72]	@ (80028a0 <HAL_GPIO_Init+0x350>)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3301      	adds	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa22 f303 	lsr.w	r3, r2, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	f47f ae78 	bne.w	8002560 <HAL_GPIO_Init+0x10>
  }
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	371c      	adds	r7, #28
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	40010000 	.word	0x40010000
 8002888:	48000400 	.word	0x48000400
 800288c:	48000800 	.word	0x48000800
 8002890:	48000c00 	.word	0x48000c00
 8002894:	48001000 	.word	0x48001000
 8002898:	48001400 	.word	0x48001400
 800289c:	48001800 	.word	0x48001800
 80028a0:	40010400 	.word	0x40010400

080028a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028bc:	2301      	movs	r3, #1
 80028be:	73fb      	strb	r3, [r7, #15]
 80028c0:	e001      	b.n	80028c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028f0:	e002      	b.n	80028f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028f2:	887a      	ldrh	r2, [r7, #2]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800290e:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f8f4 	bl	8000b10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40010400 	.word	0x40010400

08002934 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_PWREx_GetVoltageRange+0x18>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40007000 	.word	0x40007000

08002950 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800295e:	d130      	bne.n	80029c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002960:	4b23      	ldr	r3, [pc, #140]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800296c:	d038      	beq.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800296e:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002976:	4a1e      	ldr	r2, [pc, #120]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002978:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2232      	movs	r2, #50	@ 0x32
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0c9b      	lsrs	r3, r3, #18
 8002990:	3301      	adds	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002994:	e002      	b.n	800299c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3b01      	subs	r3, #1
 800299a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800299c:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a8:	d102      	bne.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f2      	bne.n	8002996 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029bc:	d110      	bne.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e00f      	b.n	80029e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029c2:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ce:	d007      	beq.n	80029e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029d0:	4b07      	ldr	r3, [pc, #28]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029d8:	4a05      	ldr	r2, [pc, #20]	@ (80029f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40007000 	.word	0x40007000
 80029f4:	20000004 	.word	0x20000004
 80029f8:	431bde83 	.word	0x431bde83

080029fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e3ca      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0e:	4b97      	ldr	r3, [pc, #604]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a18:	4b94      	ldr	r3, [pc, #592]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0310 	and.w	r3, r3, #16
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80e4 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <HAL_RCC_OscConfig+0x4a>
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b0c      	cmp	r3, #12
 8002a3a:	f040 808b 	bne.w	8002b54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f040 8087 	bne.w	8002b54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a46:	4b89      	ldr	r3, [pc, #548]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_RCC_OscConfig+0x62>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e3a2      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	4b82      	ldr	r3, [pc, #520]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <HAL_RCC_OscConfig+0x7c>
 8002a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a76:	e005      	b.n	8002a84 <HAL_RCC_OscConfig+0x88>
 8002a78:	4b7c      	ldr	r3, [pc, #496]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d223      	bcs.n	8002ad0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fd55 	bl	800353c <RCC_SetFlashLatencyFromMSIRange>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e383      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9c:	4b73      	ldr	r3, [pc, #460]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a72      	ldr	r2, [pc, #456]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002aa2:	f043 0308 	orr.w	r3, r3, #8
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b70      	ldr	r3, [pc, #448]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	496d      	ldr	r1, [pc, #436]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aba:	4b6c      	ldr	r3, [pc, #432]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	4968      	ldr	r1, [pc, #416]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
 8002ace:	e025      	b.n	8002b1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ad0:	4b66      	ldr	r3, [pc, #408]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a65      	ldr	r2, [pc, #404]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f043 0308 	orr.w	r3, r3, #8
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b63      	ldr	r3, [pc, #396]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	4960      	ldr	r1, [pc, #384]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aee:	4b5f      	ldr	r3, [pc, #380]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	495b      	ldr	r1, [pc, #364]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fd15 	bl	800353c <RCC_SetFlashLatencyFromMSIRange>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e343      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b1c:	f000 fc4a 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b52      	ldr	r3, [pc, #328]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	4950      	ldr	r1, [pc, #320]	@ (8002c70 <HAL_RCC_OscConfig+0x274>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
 8002b38:	4a4e      	ldr	r2, [pc, #312]	@ (8002c74 <HAL_RCC_OscConfig+0x278>)
 8002b3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002c78 <HAL_RCC_OscConfig+0x27c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fb73 	bl	800222c <HAL_InitTick>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d052      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	e327      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d032      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b5c:	4b43      	ldr	r3, [pc, #268]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a42      	ldr	r2, [pc, #264]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b68:	f7ff fbb0 	bl	80022cc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b70:	f7ff fbac 	bl	80022cc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e310      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b82:	4b3a      	ldr	r3, [pc, #232]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b8e:	4b37      	ldr	r3, [pc, #220]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a36      	ldr	r2, [pc, #216]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002b94:	f043 0308 	orr.w	r3, r3, #8
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b34      	ldr	r3, [pc, #208]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	4931      	ldr	r1, [pc, #196]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bac:	4b2f      	ldr	r3, [pc, #188]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	492c      	ldr	r1, [pc, #176]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e01a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a29      	ldr	r2, [pc, #164]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bce:	f7ff fb7d 	bl	80022cc <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fb79 	bl	80022cc <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e2dd      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be8:	4b20      	ldr	r3, [pc, #128]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x1da>
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bf6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d074      	beq.n	8002cee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x21a>
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b0c      	cmp	r3, #12
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d10b      	bne.n	8002c2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c16:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d064      	beq.n	8002cec <HAL_RCC_OscConfig+0x2f0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d160      	bne.n	8002cec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e2ba      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c36:	d106      	bne.n	8002c46 <HAL_RCC_OscConfig+0x24a>
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c42:	6013      	str	r3, [r2, #0]
 8002c44:	e026      	b.n	8002c94 <HAL_RCC_OscConfig+0x298>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4e:	d115      	bne.n	8002c7c <HAL_RCC_OscConfig+0x280>
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a05      	ldr	r2, [pc, #20]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002c56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b03      	ldr	r3, [pc, #12]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a02      	ldr	r2, [pc, #8]	@ (8002c6c <HAL_RCC_OscConfig+0x270>)
 8002c62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e014      	b.n	8002c94 <HAL_RCC_OscConfig+0x298>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08005f84 	.word	0x08005f84
 8002c74:	20000004 	.word	0x20000004
 8002c78:	20000008 	.word	0x20000008
 8002c7c:	4ba0      	ldr	r3, [pc, #640]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a9f      	ldr	r2, [pc, #636]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c86:	6013      	str	r3, [r2, #0]
 8002c88:	4b9d      	ldr	r3, [pc, #628]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a9c      	ldr	r2, [pc, #624]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7ff fb16 	bl	80022cc <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7ff fb12 	bl	80022cc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e276      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	4b92      	ldr	r3, [pc, #584]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0f0      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x2a8>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7ff fb02 	bl	80022cc <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7ff fafe 	bl	80022cc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e262      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cde:	4b88      	ldr	r3, [pc, #544]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x2d0>
 8002cea:	e000      	b.n	8002cee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d060      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d005      	beq.n	8002d0c <HAL_RCC_OscConfig+0x310>
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d119      	bne.n	8002d3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d116      	bne.n	8002d3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x328>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e23f      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b76      	ldr	r3, [pc, #472]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	4973      	ldr	r1, [pc, #460]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d38:	e040      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d023      	beq.n	8002d8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d42:	4b6f      	ldr	r3, [pc, #444]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a6e      	ldr	r2, [pc, #440]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7ff fabd 	bl	80022cc <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7ff fab9 	bl	80022cc <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e21d      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	4b65      	ldr	r3, [pc, #404]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b62      	ldr	r3, [pc, #392]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	495f      	ldr	r1, [pc, #380]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
 8002d88:	e018      	b.n	8002dbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a5c      	ldr	r2, [pc, #368]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7ff fa99 	bl	80022cc <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fa95 	bl	80022cc <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1f9      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db0:	4b53      	ldr	r3, [pc, #332]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1f0      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0308 	and.w	r3, r3, #8
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d03c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01c      	beq.n	8002e0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd0:	4b4b      	ldr	r3, [pc, #300]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de0:	f7ff fa74 	bl	80022cc <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de8:	f7ff fa70 	bl	80022cc <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1d4      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfa:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0ef      	beq.n	8002de8 <HAL_RCC_OscConfig+0x3ec>
 8002e08:	e01b      	b.n	8002e42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e10:	4a3b      	ldr	r2, [pc, #236]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002e12:	f023 0301 	bic.w	r3, r3, #1
 8002e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7ff fa57 	bl	80022cc <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e22:	f7ff fa53 	bl	80022cc <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1b7      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e34:	4b32      	ldr	r3, [pc, #200]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1ef      	bne.n	8002e22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a6 	beq.w	8002f9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e54:	4b2a      	ldr	r3, [pc, #168]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10d      	bne.n	8002e7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e60:	4b27      	ldr	r3, [pc, #156]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e64:	4a26      	ldr	r2, [pc, #152]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6c:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7c:	4b21      	ldr	r3, [pc, #132]	@ (8002f04 <HAL_RCC_OscConfig+0x508>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d118      	bne.n	8002eba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e88:	4b1e      	ldr	r3, [pc, #120]	@ (8002f04 <HAL_RCC_OscConfig+0x508>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f04 <HAL_RCC_OscConfig+0x508>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e94:	f7ff fa1a 	bl	80022cc <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e9c:	f7ff fa16 	bl	80022cc <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e17a      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eae:	4b15      	ldr	r3, [pc, #84]	@ (8002f04 <HAL_RCC_OscConfig+0x508>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d108      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x4d8>
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed2:	e029      	b.n	8002f28 <HAL_RCC_OscConfig+0x52c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d115      	bne.n	8002f08 <HAL_RCC_OscConfig+0x50c>
 8002edc:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ee2:	4a07      	ldr	r2, [pc, #28]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eec:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	4a03      	ldr	r2, [pc, #12]	@ (8002f00 <HAL_RCC_OscConfig+0x504>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002efc:	e014      	b.n	8002f28 <HAL_RCC_OscConfig+0x52c>
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40007000 	.word	0x40007000
 8002f08:	4b9c      	ldr	r3, [pc, #624]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	4a9b      	ldr	r2, [pc, #620]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f18:	4b98      	ldr	r3, [pc, #608]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1e:	4a97      	ldr	r2, [pc, #604]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d016      	beq.n	8002f5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f30:	f7ff f9cc 	bl	80022cc <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f38:	f7ff f9c8 	bl	80022cc <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e12a      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0ed      	beq.n	8002f38 <HAL_RCC_OscConfig+0x53c>
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5e:	f7ff f9b5 	bl	80022cc <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7ff f9b1 	bl	80022cc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e113      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f7c:	4b7f      	ldr	r3, [pc, #508]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1ed      	bne.n	8002f66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f90:	4b7a      	ldr	r3, [pc, #488]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f94:	4a79      	ldr	r2, [pc, #484]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f9a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80fe 	beq.w	80031a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	f040 80d0 	bne.w	8003150 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fb0:	4b72      	ldr	r3, [pc, #456]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d130      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d127      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11f      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ff0:	2a07      	cmp	r2, #7
 8002ff2:	bf14      	ite	ne
 8002ff4:	2201      	movne	r2, #1
 8002ff6:	2200      	moveq	r2, #0
 8002ff8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d113      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	3b01      	subs	r3, #1
 800300c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800300e:	429a      	cmp	r2, r3
 8003010:	d109      	bne.n	8003026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	085b      	lsrs	r3, r3, #1
 800301e:	3b01      	subs	r3, #1
 8003020:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d06e      	beq.n	8003104 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d069      	beq.n	8003100 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800302c:	4b53      	ldr	r3, [pc, #332]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003038:	4b50      	ldr	r3, [pc, #320]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0ad      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003048:	4b4c      	ldr	r3, [pc, #304]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a4b      	ldr	r2, [pc, #300]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 800304e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003054:	f7ff f93a 	bl	80022cc <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7ff f936 	bl	80022cc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e09a      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306e:	4b43      	ldr	r3, [pc, #268]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800307a:	4b40      	ldr	r3, [pc, #256]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	4b40      	ldr	r3, [pc, #256]	@ (8003180 <HAL_RCC_OscConfig+0x784>)
 8003080:	4013      	ands	r3, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800308a:	3a01      	subs	r2, #1
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003094:	0212      	lsls	r2, r2, #8
 8003096:	4311      	orrs	r1, r2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800309c:	0852      	lsrs	r2, r2, #1
 800309e:	3a01      	subs	r2, #1
 80030a0:	0552      	lsls	r2, r2, #21
 80030a2:	4311      	orrs	r1, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80030a8:	0852      	lsrs	r2, r2, #1
 80030aa:	3a01      	subs	r2, #1
 80030ac:	0652      	lsls	r2, r2, #25
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030b4:	0912      	lsrs	r2, r2, #4
 80030b6:	0452      	lsls	r2, r2, #17
 80030b8:	430a      	orrs	r2, r1
 80030ba:	4930      	ldr	r1, [pc, #192]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030c0:	4b2e      	ldr	r3, [pc, #184]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2d      	ldr	r2, [pc, #180]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 80030c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030cc:	4b2b      	ldr	r3, [pc, #172]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	4a2a      	ldr	r2, [pc, #168]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 80030d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030d8:	f7ff f8f8 	bl	80022cc <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7ff f8f4 	bl	80022cc <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e058      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030fe:	e050      	b.n	80031a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e04f      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003104:	4b1d      	ldr	r3, [pc, #116]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d148      	bne.n	80031a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003110:	4b1a      	ldr	r3, [pc, #104]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a19      	ldr	r2, [pc, #100]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800311a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800311c:	4b17      	ldr	r3, [pc, #92]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4a16      	ldr	r2, [pc, #88]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8003122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003126:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003128:	f7ff f8d0 	bl	80022cc <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7ff f8cc 	bl	80022cc <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e030      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x734>
 800314e:	e028      	b.n	80031a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d023      	beq.n	800319e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <HAL_RCC_OscConfig+0x780>)
 800315c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7ff f8b3 	bl	80022cc <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003168:	e00c      	b.n	8003184 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7ff f8af 	bl	80022cc <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d905      	bls.n	8003184 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e013      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
 800317c:	40021000 	.word	0x40021000
 8003180:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003184:	4b09      	ldr	r3, [pc, #36]	@ (80031ac <HAL_RCC_OscConfig+0x7b0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ec      	bne.n	800316a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_RCC_OscConfig+0x7b0>)
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	4905      	ldr	r1, [pc, #20]	@ (80031ac <HAL_RCC_OscConfig+0x7b0>)
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <HAL_RCC_OscConfig+0x7b4>)
 8003198:	4013      	ands	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
 800319c:	e001      	b.n	80031a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	feeefffc 	.word	0xfeeefffc

080031b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0e7      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b75      	ldr	r3, [pc, #468]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d910      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b72      	ldr	r3, [pc, #456]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4970      	ldr	r1, [pc, #448]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b6e      	ldr	r3, [pc, #440]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cf      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4b66      	ldr	r3, [pc, #408]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003210:	429a      	cmp	r2, r3
 8003212:	d908      	bls.n	8003226 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b63      	ldr	r3, [pc, #396]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4960      	ldr	r1, [pc, #384]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04c      	beq.n	80032cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323a:	4b5a      	ldr	r3, [pc, #360]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e0a6      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003252:	4b54      	ldr	r3, [pc, #336]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d115      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e09a      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d107      	bne.n	800327a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326a:	4b4e      	ldr	r3, [pc, #312]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e08e      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327a:	4b4a      	ldr	r3, [pc, #296]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e086      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b46      	ldr	r3, [pc, #280]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4943      	ldr	r1, [pc, #268]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7ff f816 	bl	80022cc <HAL_GetTick>
 80032a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7ff f812 	bl	80022cc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e06e      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b3a      	ldr	r3, [pc, #232]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b31      	ldr	r3, [pc, #196]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d208      	bcs.n	80032fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e8:	4b2e      	ldr	r3, [pc, #184]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	492b      	ldr	r1, [pc, #172]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fa:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d210      	bcs.n	800332a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003308:	4b25      	ldr	r3, [pc, #148]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 0207 	bic.w	r2, r3, #7
 8003310:	4923      	ldr	r1, [pc, #140]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	4313      	orrs	r3, r2
 8003316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <HAL_RCC_ClockConfig+0x1ec>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d001      	beq.n	800332a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e036      	b.n	8003398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d008      	beq.n	8003348 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003336:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	4918      	ldr	r1, [pc, #96]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003344:	4313      	orrs	r3, r2
 8003346:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003354:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4910      	ldr	r1, [pc, #64]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003368:	f000 f824 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 800336c:	4602      	mov	r2, r0
 800336e:	4b0d      	ldr	r3, [pc, #52]	@ (80033a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	490b      	ldr	r1, [pc, #44]	@ (80033a8 <HAL_RCC_ClockConfig+0x1f4>)
 800337a:	5ccb      	ldrb	r3, [r1, r3]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	fa22 f303 	lsr.w	r3, r2, r3
 8003384:	4a09      	ldr	r2, [pc, #36]	@ (80033ac <HAL_RCC_ClockConfig+0x1f8>)
 8003386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003388:	4b09      	ldr	r3, [pc, #36]	@ (80033b0 <HAL_RCC_ClockConfig+0x1fc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f7fe ff4d 	bl	800222c <HAL_InitTick>
 8003392:	4603      	mov	r3, r0
 8003394:	72fb      	strb	r3, [r7, #11]

  return status;
 8003396:	7afb      	ldrb	r3, [r7, #11]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40022000 	.word	0x40022000
 80033a4:	40021000 	.word	0x40021000
 80033a8:	08005f84 	.word	0x08005f84
 80033ac:	20000004 	.word	0x20000004
 80033b0:	20000008 	.word	0x20000008

080033b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	@ 0x24
 80033b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	2300      	movs	r3, #0
 80033c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033c2:	4b3e      	ldr	r3, [pc, #248]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033cc:	4b3b      	ldr	r3, [pc, #236]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x34>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	2b0c      	cmp	r3, #12
 80033e0:	d121      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d11e      	bne.n	8003426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033e8:	4b34      	ldr	r3, [pc, #208]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033f4:	4b31      	ldr	r3, [pc, #196]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	e005      	b.n	8003410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003404:	4b2d      	ldr	r3, [pc, #180]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003410:	4a2b      	ldr	r2, [pc, #172]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003418:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10d      	bne.n	800343c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003424:	e00a      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d102      	bne.n	8003432 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800342c:	4b25      	ldr	r3, [pc, #148]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	e004      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d101      	bne.n	800343c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003438:	4b23      	ldr	r3, [pc, #140]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800343a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d134      	bne.n	80034ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0xa6>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2b03      	cmp	r3, #3
 8003456:	d003      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0xac>
 8003458:	e005      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800345a:	4b1a      	ldr	r3, [pc, #104]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800345c:	617b      	str	r3, [r7, #20]
      break;
 800345e:	e005      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003460:	4b19      	ldr	r3, [pc, #100]	@ (80034c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003462:	617b      	str	r3, [r7, #20]
      break;
 8003464:	e002      	b.n	800346c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	617b      	str	r3, [r7, #20]
      break;
 800346a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800346c:	4b13      	ldr	r3, [pc, #76]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	3301      	adds	r3, #1
 8003478:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800347a:	4b10      	ldr	r3, [pc, #64]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	fb03 f202 	mul.w	r2, r3, r2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003492:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	0e5b      	lsrs	r3, r3, #25
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	3301      	adds	r3, #1
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034ac:	69bb      	ldr	r3, [r7, #24]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3724      	adds	r7, #36	@ 0x24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08005f9c 	.word	0x08005f9c
 80034c4:	00f42400 	.word	0x00f42400
 80034c8:	007a1200 	.word	0x007a1200

080034cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d0:	4b03      	ldr	r3, [pc, #12]	@ (80034e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034e8:	f7ff fff0 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	4904      	ldr	r1, [pc, #16]	@ (800350c <HAL_RCC_GetPCLK1Freq+0x28>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	08005f94 	.word	0x08005f94

08003510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003514:	f7ff ffda 	bl	80034cc <HAL_RCC_GetHCLKFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	0adb      	lsrs	r3, r3, #11
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	4904      	ldr	r1, [pc, #16]	@ (8003538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003530:	4618      	mov	r0, r3
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40021000 	.word	0x40021000
 8003538:	08005f94 	.word	0x08005f94

0800353c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003544:	2300      	movs	r3, #0
 8003546:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003548:	4b2a      	ldr	r3, [pc, #168]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003554:	f7ff f9ee 	bl	8002934 <HAL_PWREx_GetVoltageRange>
 8003558:	6178      	str	r0, [r7, #20]
 800355a:	e014      	b.n	8003586 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800355c:	4b25      	ldr	r3, [pc, #148]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	4a24      	ldr	r2, [pc, #144]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003566:	6593      	str	r3, [r2, #88]	@ 0x58
 8003568:	4b22      	ldr	r3, [pc, #136]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800356c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003574:	f7ff f9de 	bl	8002934 <HAL_PWREx_GetVoltageRange>
 8003578:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800357a:	4b1e      	ldr	r3, [pc, #120]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003584:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800358c:	d10b      	bne.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b80      	cmp	r3, #128	@ 0x80
 8003592:	d919      	bls.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2ba0      	cmp	r3, #160	@ 0xa0
 8003598:	d902      	bls.n	80035a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800359a:	2302      	movs	r3, #2
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e013      	b.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035a0:	2301      	movs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e010      	b.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b80      	cmp	r3, #128	@ 0x80
 80035aa:	d902      	bls.n	80035b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035ac:	2303      	movs	r3, #3
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	e00a      	b.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b80      	cmp	r3, #128	@ 0x80
 80035b6:	d102      	bne.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035b8:	2302      	movs	r3, #2
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e004      	b.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b70      	cmp	r3, #112	@ 0x70
 80035c2:	d101      	bne.n	80035c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035c4:	2301      	movs	r3, #1
 80035c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035c8:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 0207 	bic.w	r2, r3, #7
 80035d0:	4909      	ldr	r1, [pc, #36]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035d8:	4b07      	ldr	r3, [pc, #28]	@ (80035f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d001      	beq.n	80035ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40022000 	.word	0x40022000

080035fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003604:	2300      	movs	r3, #0
 8003606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003608:	2300      	movs	r3, #0
 800360a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003614:	2b00      	cmp	r3, #0
 8003616:	d041      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800361c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003620:	d02a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003622:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003626:	d824      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003628:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800362c:	d008      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800362e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003632:	d81e      	bhi.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800363c:	d010      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800363e:	e018      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003640:	4b86      	ldr	r3, [pc, #536]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	4a85      	ldr	r2, [pc, #532]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800364c:	e015      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	3304      	adds	r3, #4
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fabb 	bl	8003bd0 <RCCEx_PLLSAI1_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800365e:	e00c      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3320      	adds	r3, #32
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fba6 	bl	8003db8 <RCCEx_PLLSAI2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003670:	e003      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	74fb      	strb	r3, [r7, #19]
      break;
 8003676:	e000      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003680:	4b76      	ldr	r3, [pc, #472]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800368e:	4973      	ldr	r1, [pc, #460]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003696:	e001      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d041      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036ac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b0:	d02a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b6:	d824      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036bc:	d008      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c2:	d81e      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036cc:	d010      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036ce:	e018      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d0:	4b62      	ldr	r3, [pc, #392]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a61      	ldr	r2, [pc, #388]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036dc:	e015      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fa73 	bl	8003bd0 <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036ee:	e00c      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3320      	adds	r3, #32
 80036f4:	2100      	movs	r1, #0
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fb5e 	bl	8003db8 <RCCEx_PLLSAI2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	74fb      	strb	r3, [r7, #19]
      break;
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370a:	7cfb      	ldrb	r3, [r7, #19]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003710:	4b52      	ldr	r3, [pc, #328]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800371e:	494f      	ldr	r1, [pc, #316]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003726:	e001      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80a0 	beq.w	800387a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800373a:	2300      	movs	r3, #0
 800373c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	4b41      	ldr	r3, [pc, #260]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	4a40      	ldr	r2, [pc, #256]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003760:	4b3e      	ldr	r3, [pc, #248]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376c:	2301      	movs	r3, #1
 800376e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003770:	4b3b      	ldr	r3, [pc, #236]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3a      	ldr	r2, [pc, #232]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800377a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800377c:	f7fe fda6 	bl	80022cc <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003782:	e009      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7fe fda2 	bl	80022cc <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d902      	bls.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	74fb      	strb	r3, [r7, #19]
        break;
 8003796:	e005      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003798:	4b31      	ldr	r3, [pc, #196]	@ (8003860 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ef      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d15c      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037aa:	4b2c      	ldr	r3, [pc, #176]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d019      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c8:	4b24      	ldr	r3, [pc, #144]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d4:	4b21      	ldr	r3, [pc, #132]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037da:	4a20      	ldr	r2, [pc, #128]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037e4:	4b1d      	ldr	r3, [pc, #116]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ea:	4a1c      	ldr	r2, [pc, #112]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037f4:	4a19      	ldr	r2, [pc, #100]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fe fd61 	bl	80022cc <HAL_GetTick>
 800380a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380c:	e00b      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380e:	f7fe fd5d 	bl	80022cc <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381c:	4293      	cmp	r3, r2
 800381e:	d902      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	74fb      	strb	r3, [r7, #19]
            break;
 8003824:	e006      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ec      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800383a:	4b08      	ldr	r3, [pc, #32]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003840:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800384a:	4904      	ldr	r1, [pc, #16]	@ (800385c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003852:	e009      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	74bb      	strb	r3, [r7, #18]
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003868:	7c7b      	ldrb	r3, [r7, #17]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d105      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800386e:	4b9e      	ldr	r3, [pc, #632]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003872:	4a9d      	ldr	r2, [pc, #628]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003878:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003886:	4b98      	ldr	r3, [pc, #608]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388c:	f023 0203 	bic.w	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	4994      	ldr	r1, [pc, #592]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	4313      	orrs	r3, r2
 8003898:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ae:	f023 020c 	bic.w	r2, r3, #12
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	498c      	ldr	r1, [pc, #560]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ca:	4b87      	ldr	r3, [pc, #540]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	4983      	ldr	r1, [pc, #524]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ec:	4b7e      	ldr	r3, [pc, #504]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fa:	497b      	ldr	r1, [pc, #492]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800390e:	4b76      	ldr	r3, [pc, #472]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003914:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391c:	4972      	ldr	r1, [pc, #456]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003930:	4b6d      	ldr	r3, [pc, #436]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393e:	496a      	ldr	r1, [pc, #424]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003952:	4b65      	ldr	r3, [pc, #404]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003960:	4961      	ldr	r1, [pc, #388]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003962:	4313      	orrs	r3, r2
 8003964:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00a      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003974:	4b5c      	ldr	r3, [pc, #368]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003982:	4959      	ldr	r1, [pc, #356]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003996:	4b54      	ldr	r3, [pc, #336]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a4:	4950      	ldr	r1, [pc, #320]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039b8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	4948      	ldr	r1, [pc, #288]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039da:	4b43      	ldr	r3, [pc, #268]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e8:	493f      	ldr	r1, [pc, #252]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d028      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039fc:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a0a:	4937      	ldr	r1, [pc, #220]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a1c:	4b32      	ldr	r3, [pc, #200]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a31      	ldr	r2, [pc, #196]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a26:	60d3      	str	r3, [r2, #12]
 8003a28:	e011      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a32:	d10c      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	2101      	movs	r1, #1
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f8c8 	bl	8003bd0 <RCCEx_PLLSAI1_Config>
 8003a40:	4603      	mov	r3, r0
 8003a42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a44:	7cfb      	ldrb	r3, [r7, #19]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a4a:	7cfb      	ldrb	r3, [r7, #19]
 8003a4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d028      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a60:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a68:	491f      	ldr	r1, [pc, #124]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a78:	d106      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a84:	60d3      	str	r3, [r2, #12]
 8003a86:	e011      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a90:	d10c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3304      	adds	r3, #4
 8003a96:	2101      	movs	r1, #1
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 f899 	bl	8003bd0 <RCCEx_PLLSAI1_Config>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aa2:	7cfb      	ldrb	r3, [r7, #19]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02b      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ac6:	4908      	ldr	r1, [pc, #32]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ad2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ad6:	d109      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad8:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a02      	ldr	r2, [pc, #8]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ae2:	60d3      	str	r3, [r2, #12]
 8003ae4:	e014      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003af0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f867 	bl	8003bd0 <RCCEx_PLLSAI1_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b06:	7cfb      	ldrb	r3, [r7, #19]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02f      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b22:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b2a:	4928      	ldr	r1, [pc, #160]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	2102      	movs	r1, #2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f844 	bl	8003bd0 <RCCEx_PLLSAI1_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d014      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	74bb      	strb	r3, [r7, #18]
 8003b56:	e011      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b60:	d10c      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3320      	adds	r3, #32
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 f925 	bl	8003db8 <RCCEx_PLLSAI2_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b72:	7cfb      	ldrb	r3, [r7, #19]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b78:	7cfb      	ldrb	r3, [r7, #19]
 8003b7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b88:	4b10      	ldr	r3, [pc, #64]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b96:	490d      	ldr	r1, [pc, #52]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003baa:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bba:	4904      	ldr	r1, [pc, #16]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bde:	4b75      	ldr	r3, [pc, #468]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d018      	beq.n	8003c1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bea:	4b72      	ldr	r3, [pc, #456]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0203 	and.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d10d      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c02:	4b6c      	ldr	r3, [pc, #432]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	f003 0307 	and.w	r3, r3, #7
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
       ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d047      	beq.n	8003ca6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	e044      	b.n	8003ca6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d018      	beq.n	8003c56 <RCCEx_PLLSAI1_Config+0x86>
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d825      	bhi.n	8003c74 <RCCEx_PLLSAI1_Config+0xa4>
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d002      	beq.n	8003c32 <RCCEx_PLLSAI1_Config+0x62>
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d009      	beq.n	8003c44 <RCCEx_PLLSAI1_Config+0x74>
 8003c30:	e020      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c32:	4b60      	ldr	r3, [pc, #384]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d11d      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c42:	e01a      	b.n	8003c7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c44:	4b5b      	ldr	r3, [pc, #364]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d116      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c54:	e013      	b.n	8003c7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c56:	4b57      	ldr	r3, [pc, #348]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c62:	4b54      	ldr	r3, [pc, #336]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c72:	e006      	b.n	8003c82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      break;
 8003c78:	e004      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e002      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10d      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	4944      	ldr	r1, [pc, #272]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d17d      	bne.n	8003da8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cac:	4b41      	ldr	r3, [pc, #260]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a40      	ldr	r2, [pc, #256]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb8:	f7fe fb08 	bl	80022cc <HAL_GetTick>
 8003cbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cbe:	e009      	b.n	8003cd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cc0:	f7fe fb04 	bl	80022cc <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d902      	bls.n	8003cd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8003cd2:	e005      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd4:	4b37      	ldr	r3, [pc, #220]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ef      	bne.n	8003cc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d160      	bne.n	8003da8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d111      	bne.n	8003d10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cec:	4b31      	ldr	r3, [pc, #196]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6892      	ldr	r2, [r2, #8]
 8003cfc:	0211      	lsls	r1, r2, #8
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	68d2      	ldr	r2, [r2, #12]
 8003d02:	0912      	lsrs	r2, r2, #4
 8003d04:	0452      	lsls	r2, r2, #17
 8003d06:	430a      	orrs	r2, r1
 8003d08:	492a      	ldr	r1, [pc, #168]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	610b      	str	r3, [r1, #16]
 8003d0e:	e027      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d112      	bne.n	8003d3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d16:	4b27      	ldr	r3, [pc, #156]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	0211      	lsls	r1, r2, #8
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6912      	ldr	r2, [r2, #16]
 8003d2c:	0852      	lsrs	r2, r2, #1
 8003d2e:	3a01      	subs	r2, #1
 8003d30:	0552      	lsls	r2, r2, #21
 8003d32:	430a      	orrs	r2, r1
 8003d34:	491f      	ldr	r1, [pc, #124]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	610b      	str	r3, [r1, #16]
 8003d3a:	e011      	b.n	8003d60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6892      	ldr	r2, [r2, #8]
 8003d4c:	0211      	lsls	r1, r2, #8
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6952      	ldr	r2, [r2, #20]
 8003d52:	0852      	lsrs	r2, r2, #1
 8003d54:	3a01      	subs	r2, #1
 8003d56:	0652      	lsls	r2, r2, #25
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	4916      	ldr	r1, [pc, #88]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d60:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a13      	ldr	r2, [pc, #76]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fe faae 	bl	80022cc <HAL_GetTick>
 8003d70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d72:	e009      	b.n	8003d88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d74:	f7fe faaa 	bl	80022cc <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d902      	bls.n	8003d88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	73fb      	strb	r3, [r7, #15]
          break;
 8003d86:	e005      	b.n	8003d94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0ef      	beq.n	8003d74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d9a:	4b06      	ldr	r3, [pc, #24]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	4904      	ldr	r1, [pc, #16]	@ (8003db4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000

08003db8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d018      	beq.n	8003e04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dd2:	4b67      	ldr	r3, [pc, #412]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0203 	and.w	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d10d      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
       ||
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003dea:	4b61      	ldr	r3, [pc, #388]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d047      	beq.n	8003e8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
 8003e02:	e044      	b.n	8003e8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d018      	beq.n	8003e3e <RCCEx_PLLSAI2_Config+0x86>
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d825      	bhi.n	8003e5c <RCCEx_PLLSAI2_Config+0xa4>
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d002      	beq.n	8003e1a <RCCEx_PLLSAI2_Config+0x62>
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d009      	beq.n	8003e2c <RCCEx_PLLSAI2_Config+0x74>
 8003e18:	e020      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e1a:	4b55      	ldr	r3, [pc, #340]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11d      	bne.n	8003e62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2a:	e01a      	b.n	8003e62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e2c:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3c:	e013      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e3e:	4b4c      	ldr	r3, [pc, #304]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e4a:	4b49      	ldr	r3, [pc, #292]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e5a:	e006      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e60:	e004      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10d      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e72:	4b3f      	ldr	r3, [pc, #252]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	430b      	orrs	r3, r1
 8003e88:	4939      	ldr	r1, [pc, #228]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d167      	bne.n	8003f64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e94:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a35      	ldr	r2, [pc, #212]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ea0:	f7fe fa14 	bl	80022cc <HAL_GetTick>
 8003ea4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ea6:	e009      	b.n	8003ebc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ea8:	f7fe fa10 	bl	80022cc <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d902      	bls.n	8003ebc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eba:	e005      	b.n	8003ec8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ef      	bne.n	8003ea8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d14a      	bne.n	8003f64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d111      	bne.n	8003ef8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ed4:	4b26      	ldr	r3, [pc, #152]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6892      	ldr	r2, [r2, #8]
 8003ee4:	0211      	lsls	r1, r2, #8
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68d2      	ldr	r2, [r2, #12]
 8003eea:	0912      	lsrs	r2, r2, #4
 8003eec:	0452      	lsls	r2, r2, #17
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	491f      	ldr	r1, [pc, #124]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	614b      	str	r3, [r1, #20]
 8003ef6:	e011      	b.n	8003f1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6892      	ldr	r2, [r2, #8]
 8003f08:	0211      	lsls	r1, r2, #8
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6912      	ldr	r2, [r2, #16]
 8003f0e:	0852      	lsrs	r2, r2, #1
 8003f10:	3a01      	subs	r2, #1
 8003f12:	0652      	lsls	r2, r2, #25
 8003f14:	430a      	orrs	r2, r1
 8003f16:	4916      	ldr	r1, [pc, #88]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f1c:	4b14      	ldr	r3, [pc, #80]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a13      	ldr	r2, [pc, #76]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fe f9d0 	bl	80022cc <HAL_GetTick>
 8003f2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f2e:	e009      	b.n	8003f44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f30:	f7fe f9cc 	bl	80022cc <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d902      	bls.n	8003f44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	73fb      	strb	r3, [r7, #15]
          break;
 8003f42:	e005      	b.n	8003f50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f44:	4b0a      	ldr	r3, [pc, #40]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ef      	beq.n	8003f30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f56:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4904      	ldr	r1, [pc, #16]	@ (8003f70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40021000 	.word	0x40021000

08003f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e095      	b.n	80040b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d108      	bne.n	8003fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f96:	d009      	beq.n	8003fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	61da      	str	r2, [r3, #28]
 8003f9e:	e005      	b.n	8003fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fd f904 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fec:	d902      	bls.n	8003ff4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e002      	b.n	8003ffa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004002:	d007      	beq.n	8004014 <HAL_SPI_Init+0xa0>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800400c:	d002      	beq.n	8004014 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004042:	431a      	orrs	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004056:	ea42 0103 	orr.w	r1, r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	f003 0204 	and.w	r2, r3, #4
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004090:	ea42 0103 	orr.w	r1, r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	60b9      	str	r1, [r7, #8]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	4613      	mov	r3, r2
 80040c8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040ca:	f7fe f8ff 	bl	80022cc <HAL_GetTick>
 80040ce:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d001      	beq.n	80040e4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
 80040e2:	e15c      	b.n	800439e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_SPI_Transmit+0x36>
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e154      	b.n	800439e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_SPI_Transmit+0x48>
 80040fe:	2302      	movs	r3, #2
 8004100:	e14d      	b.n	800439e <HAL_SPI_Transmit+0x2e4>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2203      	movs	r2, #3
 800410e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	88fa      	ldrh	r2, [r7, #6]
 8004122:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	88fa      	ldrh	r2, [r7, #6]
 8004128:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004154:	d10f      	bne.n	8004176 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004174:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004180:	2b40      	cmp	r3, #64	@ 0x40
 8004182:	d007      	beq.n	8004194 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800419c:	d952      	bls.n	8004244 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_SPI_Transmit+0xf2>
 80041a6:	8b7b      	ldrh	r3, [r7, #26]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d145      	bne.n	8004238 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b0:	881a      	ldrh	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041d0:	e032      	b.n	8004238 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d112      	bne.n	8004206 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f0:	1c9a      	adds	r2, r3, #2
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b29a      	uxth	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004204:	e018      	b.n	8004238 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004206:	f7fe f861 	bl	80022cc <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d803      	bhi.n	800421e <HAL_SPI_Transmit+0x164>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800421c:	d102      	bne.n	8004224 <HAL_SPI_Transmit+0x16a>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d109      	bne.n	8004238 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0b2      	b.n	800439e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1c7      	bne.n	80041d2 <HAL_SPI_Transmit+0x118>
 8004242:	e083      	b.n	800434c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <HAL_SPI_Transmit+0x198>
 800424c:	8b7b      	ldrh	r3, [r7, #26]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d177      	bne.n	8004342 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004256:	b29b      	uxth	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d912      	bls.n	8004282 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004260:	881a      	ldrh	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426c:	1c9a      	adds	r2, r3, #2
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b02      	subs	r3, #2
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004280:	e05f      	b.n	8004342 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	7812      	ldrb	r2, [r2, #0]
 800428e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80042a8:	e04b      	b.n	8004342 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d12b      	bne.n	8004310 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d912      	bls.n	80042e8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c6:	881a      	ldrh	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d2:	1c9a      	adds	r2, r3, #2
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b02      	subs	r3, #2
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80042e6:	e02c      	b.n	8004342 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	7812      	ldrb	r2, [r2, #0]
 80042f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800430e:	e018      	b.n	8004342 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004310:	f7fd ffdc 	bl	80022cc <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d803      	bhi.n	8004328 <HAL_SPI_Transmit+0x26e>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004326:	d102      	bne.n	800432e <HAL_SPI_Transmit+0x274>
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e02d      	b.n	800439e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ae      	bne.n	80042aa <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f947 	bl	80045e4 <SPI_EndRxTxTransaction>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10a      	bne.n	8004380 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800439c:	2300      	movs	r3, #0
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4613      	mov	r3, r2
 80043b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043b8:	f7fd ff88 	bl	80022cc <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	4413      	add	r3, r2
 80043c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043c8:	f7fd ff80 	bl	80022cc <HAL_GetTick>
 80043cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043ce:	4b39      	ldr	r3, [pc, #228]	@ (80044b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	015b      	lsls	r3, r3, #5
 80043d4:	0d1b      	lsrs	r3, r3, #20
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043de:	e054      	b.n	800448a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043e6:	d050      	beq.n	800448a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043e8:	f7fd ff70 	bl	80022cc <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d902      	bls.n	80043fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d13d      	bne.n	800447a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800440c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004416:	d111      	bne.n	800443c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004420:	d004      	beq.n	800442c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800442a:	d107      	bne.n	800443c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800443a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004444:	d10f      	bne.n	8004466 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004464:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e017      	b.n	80044aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	3b01      	subs	r3, #1
 8004488:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4013      	ands	r3, r2
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	bf0c      	ite	eq
 800449a:	2301      	moveq	r3, #1
 800449c:	2300      	movne	r3, #0
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	461a      	mov	r2, r3
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d19b      	bne.n	80043e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000004 	.word	0x20000004

080044b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	@ 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044ca:	f7fd feff 	bl	80022cc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	1a9b      	subs	r3, r3, r2
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	4413      	add	r3, r2
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80044da:	f7fd fef7 	bl	80022cc <HAL_GetTick>
 80044de:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044e8:	4b3d      	ldr	r3, [pc, #244]	@ (80045e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	00da      	lsls	r2, r3, #3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	0d1b      	lsrs	r3, r3, #20
 80044f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fa:	fb02 f303 	mul.w	r3, r2, r3
 80044fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004500:	e060      	b.n	80045c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004508:	d107      	bne.n	800451a <SPI_WaitFifoStateUntilTimeout+0x62>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d104      	bne.n	800451a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004518:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004520:	d050      	beq.n	80045c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004522:	f7fd fed3 	bl	80022cc <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452e:	429a      	cmp	r2, r3
 8004530:	d902      	bls.n	8004538 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d13d      	bne.n	80045b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004546:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004550:	d111      	bne.n	8004576 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800455a:	d004      	beq.n	8004566 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004564:	d107      	bne.n	8004576 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004574:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457e:	d10f      	bne.n	80045a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800459e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e010      	b.n	80045d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d196      	bne.n	8004502 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3728      	adds	r7, #40	@ 0x28
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000004 	.word	0x20000004

080045e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff ff5b 	bl	80044b8 <SPI_WaitFifoStateUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800460c:	f043 0220 	orr.w	r2, r3, #32
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e027      	b.n	8004668 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2200      	movs	r2, #0
 8004620:	2180      	movs	r1, #128	@ 0x80
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff fec0 	bl	80043a8 <SPI_WaitFlagStateUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d007      	beq.n	800463e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e014      	b.n	8004668 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff ff34 	bl	80044b8 <SPI_WaitFifoStateUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e000      	b.n	8004668 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e049      	b.n	8004716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd f95a 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 fb5e 	bl	8004d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	d001      	beq.n	8004738 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e047      	b.n	80047c8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a23      	ldr	r2, [pc, #140]	@ (80047d4 <HAL_TIM_Base_Start+0xb4>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d01d      	beq.n	8004786 <HAL_TIM_Base_Start+0x66>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d018      	beq.n	8004786 <HAL_TIM_Base_Start+0x66>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a1f      	ldr	r2, [pc, #124]	@ (80047d8 <HAL_TIM_Base_Start+0xb8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_TIM_Base_Start+0x66>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <HAL_TIM_Base_Start+0xbc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00e      	beq.n	8004786 <HAL_TIM_Base_Start+0x66>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1c      	ldr	r2, [pc, #112]	@ (80047e0 <HAL_TIM_Base_Start+0xc0>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d009      	beq.n	8004786 <HAL_TIM_Base_Start+0x66>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1b      	ldr	r2, [pc, #108]	@ (80047e4 <HAL_TIM_Base_Start+0xc4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d004      	beq.n	8004786 <HAL_TIM_Base_Start+0x66>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a19      	ldr	r2, [pc, #100]	@ (80047e8 <HAL_TIM_Base_Start+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d115      	bne.n	80047b2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	4b17      	ldr	r3, [pc, #92]	@ (80047ec <HAL_TIM_Base_Start+0xcc>)
 800478e:	4013      	ands	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b06      	cmp	r3, #6
 8004796:	d015      	beq.n	80047c4 <HAL_TIM_Base_Start+0xa4>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479e:	d011      	beq.n	80047c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	e008      	b.n	80047c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e000      	b.n	80047c6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40012c00 	.word	0x40012c00
 80047d8:	40000400 	.word	0x40000400
 80047dc:	40000800 	.word	0x40000800
 80047e0:	40000c00 	.word	0x40000c00
 80047e4:	40013400 	.word	0x40013400
 80047e8:	40014000 	.word	0x40014000
 80047ec:	00010007 	.word	0x00010007

080047f0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6a1a      	ldr	r2, [r3, #32]
 80047fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10f      	bne.n	8004828 <HAL_TIM_Base_Stop+0x38>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a1a      	ldr	r2, [r3, #32]
 800480e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <HAL_TIM_Base_Stop+0x38>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d001      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e04f      	b.n	80048f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a23      	ldr	r2, [pc, #140]	@ (8004904 <HAL_TIM_Base_Start_IT+0xc4>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d01d      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0x76>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004882:	d018      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0x76>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <HAL_TIM_Base_Start_IT+0xc8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0x76>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1e      	ldr	r2, [pc, #120]	@ (800490c <HAL_TIM_Base_Start_IT+0xcc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0x76>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <HAL_TIM_Base_Start_IT+0xd0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0x76>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004914 <HAL_TIM_Base_Start_IT+0xd4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_Base_Start_IT+0x76>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a19      	ldr	r2, [pc, #100]	@ (8004918 <HAL_TIM_Base_Start_IT+0xd8>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d115      	bne.n	80048e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	4b17      	ldr	r3, [pc, #92]	@ (800491c <HAL_TIM_Base_Start_IT+0xdc>)
 80048be:	4013      	ands	r3, r2
 80048c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d015      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0xb4>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ce:	d011      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	e008      	b.n	80048f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f042 0201 	orr.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	40012c00 	.word	0x40012c00
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40013400 	.word	0x40013400
 8004918:	40014000 	.word	0x40014000
 800491c:	00010007 	.word	0x00010007

08004920 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10f      	bne.n	8004968 <HAL_TIM_Base_Stop_IT+0x48>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004952:	4013      	ands	r3, r2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_TIM_Base_Stop_IT+0x48>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d01b      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0202 	mvn.w	r2, #2
 80049b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 0303 	and.w	r3, r3, #3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f9b2 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 80049ce:	e005      	b.n	80049dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f9a4 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9b5 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0304 	and.w	r3, r3, #4
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01b      	beq.n	8004a2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f06f 0204 	mvn.w	r2, #4
 80049fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d003      	beq.n	8004a1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f98c 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004a1a:	e005      	b.n	8004a28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f97e 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f98f 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d020      	beq.n	8004a7a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01b      	beq.n	8004a7a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f06f 0208 	mvn.w	r2, #8
 8004a4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69db      	ldr	r3, [r3, #28]
 8004a58:	f003 0303 	and.w	r3, r3, #3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f966 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004a66:	e005      	b.n	8004a74 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f958 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f969 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01b      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f06f 0210 	mvn.w	r2, #16
 8004a96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f940 	bl	8004d32 <HAL_TIM_IC_CaptureCallback>
 8004ab2:	e005      	b.n	8004ac0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f932 	bl	8004d1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f943 	bl	8004d46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f06f 0201 	mvn.w	r2, #1
 8004ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fc f91f 	bl	8000d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00c      	beq.n	8004b18 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fafe 	bl	8005114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00c      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d007      	beq.n	8004b3c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 faf6 	bl	8005128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00c      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8fd 	bl	8004d5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00c      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f003 0320 	and.w	r3, r3, #32
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d007      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0220 	mvn.w	r2, #32
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fabe 	bl	8005100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b84:	bf00      	nop
 8004b86:	3710      	adds	r7, #16
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e0b6      	b.n	8004d16 <HAL_TIM_ConfigClockSource+0x18a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004be4:	d03e      	beq.n	8004c64 <HAL_TIM_ConfigClockSource+0xd8>
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bea:	f200 8087 	bhi.w	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf2:	f000 8086 	beq.w	8004d02 <HAL_TIM_ConfigClockSource+0x176>
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bfa:	d87f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004bfc:	2b70      	cmp	r3, #112	@ 0x70
 8004bfe:	d01a      	beq.n	8004c36 <HAL_TIM_ConfigClockSource+0xaa>
 8004c00:	2b70      	cmp	r3, #112	@ 0x70
 8004c02:	d87b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c04:	2b60      	cmp	r3, #96	@ 0x60
 8004c06:	d050      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x11e>
 8004c08:	2b60      	cmp	r3, #96	@ 0x60
 8004c0a:	d877      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c0c:	2b50      	cmp	r3, #80	@ 0x50
 8004c0e:	d03c      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xfe>
 8004c10:	2b50      	cmp	r3, #80	@ 0x50
 8004c12:	d873      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c14:	2b40      	cmp	r3, #64	@ 0x40
 8004c16:	d058      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x13e>
 8004c18:	2b40      	cmp	r3, #64	@ 0x40
 8004c1a:	d86f      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c1c:	2b30      	cmp	r3, #48	@ 0x30
 8004c1e:	d064      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c20:	2b30      	cmp	r3, #48	@ 0x30
 8004c22:	d86b      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d060      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d867      	bhi.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05c      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d05a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x15e>
 8004c34:	e062      	b.n	8004cfc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c46:	f000 f9b3 	bl	8004fb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	609a      	str	r2, [r3, #8]
      break;
 8004c62:	e04f      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c74:	f000 f99c 	bl	8004fb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c86:	609a      	str	r2, [r3, #8]
      break;
 8004c88:	e03c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 f910 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2150      	movs	r1, #80	@ 0x50
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 f969 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e02c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 f92f 	bl	8004f1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2160      	movs	r1, #96	@ 0x60
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 f959 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e01c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	f000 f8f0 	bl	8004ebc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2140      	movs	r1, #64	@ 0x40
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 f949 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004ce8:	e00c      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 f940 	bl	8004f7a <TIM_ITRx_SetConfig>
      break;
 8004cfa:	e003      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004d02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a46      	ldr	r2, [pc, #280]	@ (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8e:	d00f      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a43      	ldr	r2, [pc, #268]	@ (8004ea0 <TIM_Base_SetConfig+0x130>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00b      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a42      	ldr	r2, [pc, #264]	@ (8004ea4 <TIM_Base_SetConfig+0x134>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d007      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a41      	ldr	r2, [pc, #260]	@ (8004ea8 <TIM_Base_SetConfig+0x138>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d003      	beq.n	8004db0 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a40      	ldr	r2, [pc, #256]	@ (8004eac <TIM_Base_SetConfig+0x13c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d108      	bne.n	8004dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a35      	ldr	r2, [pc, #212]	@ (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d01f      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd0:	d01b      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a32      	ldr	r2, [pc, #200]	@ (8004ea0 <TIM_Base_SetConfig+0x130>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d017      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	@ (8004ea4 <TIM_Base_SetConfig+0x134>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a30      	ldr	r2, [pc, #192]	@ (8004ea8 <TIM_Base_SetConfig+0x138>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00f      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2f      	ldr	r2, [pc, #188]	@ (8004eac <TIM_Base_SetConfig+0x13c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb0 <TIM_Base_SetConfig+0x140>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d007      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb4 <TIM_Base_SetConfig+0x144>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_Base_SetConfig+0x9a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb8 <TIM_Base_SetConfig+0x148>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <TIM_Base_SetConfig+0x12c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00f      	beq.n	8004e68 <TIM_Base_SetConfig+0xf8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a18      	ldr	r2, [pc, #96]	@ (8004eac <TIM_Base_SetConfig+0x13c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00b      	beq.n	8004e68 <TIM_Base_SetConfig+0xf8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a17      	ldr	r2, [pc, #92]	@ (8004eb0 <TIM_Base_SetConfig+0x140>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d007      	beq.n	8004e68 <TIM_Base_SetConfig+0xf8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	@ (8004eb4 <TIM_Base_SetConfig+0x144>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0xf8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a15      	ldr	r2, [pc, #84]	@ (8004eb8 <TIM_Base_SetConfig+0x148>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d105      	bne.n	8004e8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	611a      	str	r2, [r3, #16]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop
 8004e9c:	40012c00 	.word	0x40012c00
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 030a 	bic.w	r3, r3, #10
 8004ef8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f023 0210 	bic.w	r2, r3, #16
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	031b      	lsls	r3, r3, #12
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f56:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b085      	sub	sp, #20
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f043 0307 	orr.w	r3, r3, #7
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	609a      	str	r2, [r3, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	021a      	lsls	r2, r3, #8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005004:	2302      	movs	r3, #2
 8005006:	e068      	b.n	80050da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2e      	ldr	r2, [pc, #184]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d004      	beq.n	800503c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a2d      	ldr	r2, [pc, #180]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01d      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507a:	d018      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a1b      	ldr	r2, [pc, #108]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1a      	ldr	r2, [pc, #104]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d00e      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a18      	ldr	r2, [pc, #96]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d009      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a14      	ldr	r2, [pc, #80]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10c      	bne.n	80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40000400 	.word	0x40000400
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40000c00 	.word	0x40000c00
 80050fc:	40014000 	.word	0x40014000

08005100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e040      	b.n	80051d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc ffbe 	bl	80020e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	@ 0x24
 8005168:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fae0 	bl	8005748 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f825 	bl	80051d8 <UART_SetConfig>
 800518e:	4603      	mov	r3, r0
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e01b      	b.n	80051d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fb5f 	bl	800588c <UART_CheckIdleState>
 80051ce:	4603      	mov	r3, r0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b08a      	sub	sp, #40	@ 0x28
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4ba4      	ldr	r3, [pc, #656]	@ (8005498 <UART_SetConfig+0x2c0>)
 8005208:	4013      	ands	r3, r2
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005210:	430b      	orrs	r3, r1
 8005212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a99      	ldr	r2, [pc, #612]	@ (800549c <UART_SetConfig+0x2c4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005240:	4313      	orrs	r3, r2
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005254:	430a      	orrs	r2, r1
 8005256:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a90      	ldr	r2, [pc, #576]	@ (80054a0 <UART_SetConfig+0x2c8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d126      	bne.n	80052b0 <UART_SetConfig+0xd8>
 8005262:	4b90      	ldr	r3, [pc, #576]	@ (80054a4 <UART_SetConfig+0x2cc>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b03      	cmp	r3, #3
 800526e:	d81b      	bhi.n	80052a8 <UART_SetConfig+0xd0>
 8005270:	a201      	add	r2, pc, #4	@ (adr r2, 8005278 <UART_SetConfig+0xa0>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	08005299 	.word	0x08005299
 8005280:	08005291 	.word	0x08005291
 8005284:	080052a1 	.word	0x080052a1
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528e:	e116      	b.n	80054be <UART_SetConfig+0x2e6>
 8005290:	2302      	movs	r3, #2
 8005292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005296:	e112      	b.n	80054be <UART_SetConfig+0x2e6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529e:	e10e      	b.n	80054be <UART_SetConfig+0x2e6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a6:	e10a      	b.n	80054be <UART_SetConfig+0x2e6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ae:	e106      	b.n	80054be <UART_SetConfig+0x2e6>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a7c      	ldr	r2, [pc, #496]	@ (80054a8 <UART_SetConfig+0x2d0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d138      	bne.n	800532c <UART_SetConfig+0x154>
 80052ba:	4b7a      	ldr	r3, [pc, #488]	@ (80054a4 <UART_SetConfig+0x2cc>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c0:	f003 030c 	and.w	r3, r3, #12
 80052c4:	2b0c      	cmp	r3, #12
 80052c6:	d82d      	bhi.n	8005324 <UART_SetConfig+0x14c>
 80052c8:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <UART_SetConfig+0xf8>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005305 	.word	0x08005305
 80052d4:	08005325 	.word	0x08005325
 80052d8:	08005325 	.word	0x08005325
 80052dc:	08005325 	.word	0x08005325
 80052e0:	08005315 	.word	0x08005315
 80052e4:	08005325 	.word	0x08005325
 80052e8:	08005325 	.word	0x08005325
 80052ec:	08005325 	.word	0x08005325
 80052f0:	0800530d 	.word	0x0800530d
 80052f4:	08005325 	.word	0x08005325
 80052f8:	08005325 	.word	0x08005325
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800531d 	.word	0x0800531d
 8005304:	2300      	movs	r3, #0
 8005306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530a:	e0d8      	b.n	80054be <UART_SetConfig+0x2e6>
 800530c:	2302      	movs	r3, #2
 800530e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005312:	e0d4      	b.n	80054be <UART_SetConfig+0x2e6>
 8005314:	2304      	movs	r3, #4
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800531a:	e0d0      	b.n	80054be <UART_SetConfig+0x2e6>
 800531c:	2308      	movs	r3, #8
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005322:	e0cc      	b.n	80054be <UART_SetConfig+0x2e6>
 8005324:	2310      	movs	r3, #16
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800532a:	e0c8      	b.n	80054be <UART_SetConfig+0x2e6>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a5e      	ldr	r2, [pc, #376]	@ (80054ac <UART_SetConfig+0x2d4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d125      	bne.n	8005382 <UART_SetConfig+0x1aa>
 8005336:	4b5b      	ldr	r3, [pc, #364]	@ (80054a4 <UART_SetConfig+0x2cc>)
 8005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005340:	2b30      	cmp	r3, #48	@ 0x30
 8005342:	d016      	beq.n	8005372 <UART_SetConfig+0x19a>
 8005344:	2b30      	cmp	r3, #48	@ 0x30
 8005346:	d818      	bhi.n	800537a <UART_SetConfig+0x1a2>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d00a      	beq.n	8005362 <UART_SetConfig+0x18a>
 800534c:	2b20      	cmp	r3, #32
 800534e:	d814      	bhi.n	800537a <UART_SetConfig+0x1a2>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <UART_SetConfig+0x182>
 8005354:	2b10      	cmp	r3, #16
 8005356:	d008      	beq.n	800536a <UART_SetConfig+0x192>
 8005358:	e00f      	b.n	800537a <UART_SetConfig+0x1a2>
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005360:	e0ad      	b.n	80054be <UART_SetConfig+0x2e6>
 8005362:	2302      	movs	r3, #2
 8005364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005368:	e0a9      	b.n	80054be <UART_SetConfig+0x2e6>
 800536a:	2304      	movs	r3, #4
 800536c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005370:	e0a5      	b.n	80054be <UART_SetConfig+0x2e6>
 8005372:	2308      	movs	r3, #8
 8005374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005378:	e0a1      	b.n	80054be <UART_SetConfig+0x2e6>
 800537a:	2310      	movs	r3, #16
 800537c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005380:	e09d      	b.n	80054be <UART_SetConfig+0x2e6>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a4a      	ldr	r2, [pc, #296]	@ (80054b0 <UART_SetConfig+0x2d8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d125      	bne.n	80053d8 <UART_SetConfig+0x200>
 800538c:	4b45      	ldr	r3, [pc, #276]	@ (80054a4 <UART_SetConfig+0x2cc>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005392:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005396:	2bc0      	cmp	r3, #192	@ 0xc0
 8005398:	d016      	beq.n	80053c8 <UART_SetConfig+0x1f0>
 800539a:	2bc0      	cmp	r3, #192	@ 0xc0
 800539c:	d818      	bhi.n	80053d0 <UART_SetConfig+0x1f8>
 800539e:	2b80      	cmp	r3, #128	@ 0x80
 80053a0:	d00a      	beq.n	80053b8 <UART_SetConfig+0x1e0>
 80053a2:	2b80      	cmp	r3, #128	@ 0x80
 80053a4:	d814      	bhi.n	80053d0 <UART_SetConfig+0x1f8>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d002      	beq.n	80053b0 <UART_SetConfig+0x1d8>
 80053aa:	2b40      	cmp	r3, #64	@ 0x40
 80053ac:	d008      	beq.n	80053c0 <UART_SetConfig+0x1e8>
 80053ae:	e00f      	b.n	80053d0 <UART_SetConfig+0x1f8>
 80053b0:	2300      	movs	r3, #0
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b6:	e082      	b.n	80054be <UART_SetConfig+0x2e6>
 80053b8:	2302      	movs	r3, #2
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053be:	e07e      	b.n	80054be <UART_SetConfig+0x2e6>
 80053c0:	2304      	movs	r3, #4
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c6:	e07a      	b.n	80054be <UART_SetConfig+0x2e6>
 80053c8:	2308      	movs	r3, #8
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ce:	e076      	b.n	80054be <UART_SetConfig+0x2e6>
 80053d0:	2310      	movs	r3, #16
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d6:	e072      	b.n	80054be <UART_SetConfig+0x2e6>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a35      	ldr	r2, [pc, #212]	@ (80054b4 <UART_SetConfig+0x2dc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d12a      	bne.n	8005438 <UART_SetConfig+0x260>
 80053e2:	4b30      	ldr	r3, [pc, #192]	@ (80054a4 <UART_SetConfig+0x2cc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053f0:	d01a      	beq.n	8005428 <UART_SetConfig+0x250>
 80053f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053f6:	d81b      	bhi.n	8005430 <UART_SetConfig+0x258>
 80053f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053fc:	d00c      	beq.n	8005418 <UART_SetConfig+0x240>
 80053fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005402:	d815      	bhi.n	8005430 <UART_SetConfig+0x258>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <UART_SetConfig+0x238>
 8005408:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540c:	d008      	beq.n	8005420 <UART_SetConfig+0x248>
 800540e:	e00f      	b.n	8005430 <UART_SetConfig+0x258>
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005416:	e052      	b.n	80054be <UART_SetConfig+0x2e6>
 8005418:	2302      	movs	r3, #2
 800541a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800541e:	e04e      	b.n	80054be <UART_SetConfig+0x2e6>
 8005420:	2304      	movs	r3, #4
 8005422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005426:	e04a      	b.n	80054be <UART_SetConfig+0x2e6>
 8005428:	2308      	movs	r3, #8
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800542e:	e046      	b.n	80054be <UART_SetConfig+0x2e6>
 8005430:	2310      	movs	r3, #16
 8005432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005436:	e042      	b.n	80054be <UART_SetConfig+0x2e6>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a17      	ldr	r2, [pc, #92]	@ (800549c <UART_SetConfig+0x2c4>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d13a      	bne.n	80054b8 <UART_SetConfig+0x2e0>
 8005442:	4b18      	ldr	r3, [pc, #96]	@ (80054a4 <UART_SetConfig+0x2cc>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005448:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800544c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005450:	d01a      	beq.n	8005488 <UART_SetConfig+0x2b0>
 8005452:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005456:	d81b      	bhi.n	8005490 <UART_SetConfig+0x2b8>
 8005458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800545c:	d00c      	beq.n	8005478 <UART_SetConfig+0x2a0>
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005462:	d815      	bhi.n	8005490 <UART_SetConfig+0x2b8>
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <UART_SetConfig+0x298>
 8005468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546c:	d008      	beq.n	8005480 <UART_SetConfig+0x2a8>
 800546e:	e00f      	b.n	8005490 <UART_SetConfig+0x2b8>
 8005470:	2300      	movs	r3, #0
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005476:	e022      	b.n	80054be <UART_SetConfig+0x2e6>
 8005478:	2302      	movs	r3, #2
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547e:	e01e      	b.n	80054be <UART_SetConfig+0x2e6>
 8005480:	2304      	movs	r3, #4
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005486:	e01a      	b.n	80054be <UART_SetConfig+0x2e6>
 8005488:	2308      	movs	r3, #8
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800548e:	e016      	b.n	80054be <UART_SetConfig+0x2e6>
 8005490:	2310      	movs	r3, #16
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005496:	e012      	b.n	80054be <UART_SetConfig+0x2e6>
 8005498:	efff69f3 	.word	0xefff69f3
 800549c:	40008000 	.word	0x40008000
 80054a0:	40013800 	.word	0x40013800
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40004400 	.word	0x40004400
 80054ac:	40004800 	.word	0x40004800
 80054b0:	40004c00 	.word	0x40004c00
 80054b4:	40005000 	.word	0x40005000
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a9f      	ldr	r2, [pc, #636]	@ (8005740 <UART_SetConfig+0x568>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d17a      	bne.n	80055be <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d824      	bhi.n	800551a <UART_SetConfig+0x342>
 80054d0:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <UART_SetConfig+0x300>)
 80054d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054fd 	.word	0x080054fd
 80054dc:	0800551b 	.word	0x0800551b
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800551b 	.word	0x0800551b
 80054e8:	0800550b 	.word	0x0800550b
 80054ec:	0800551b 	.word	0x0800551b
 80054f0:	0800551b 	.word	0x0800551b
 80054f4:	0800551b 	.word	0x0800551b
 80054f8:	08005513 	.word	0x08005513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fd fff2 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 8005500:	61f8      	str	r0, [r7, #28]
        break;
 8005502:	e010      	b.n	8005526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005504:	4b8f      	ldr	r3, [pc, #572]	@ (8005744 <UART_SetConfig+0x56c>)
 8005506:	61fb      	str	r3, [r7, #28]
        break;
 8005508:	e00d      	b.n	8005526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800550a:	f7fd ff53 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 800550e:	61f8      	str	r0, [r7, #28]
        break;
 8005510:	e009      	b.n	8005526 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005516:	61fb      	str	r3, [r7, #28]
        break;
 8005518:	e005      	b.n	8005526 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80fb 	beq.w	8005724 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	429a      	cmp	r2, r3
 800553c:	d305      	bcc.n	800554a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	429a      	cmp	r2, r3
 8005548:	d903      	bls.n	8005552 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005550:	e0e8      	b.n	8005724 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2200      	movs	r2, #0
 8005556:	461c      	mov	r4, r3
 8005558:	4615      	mov	r5, r2
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	022b      	lsls	r3, r5, #8
 8005564:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005568:	0222      	lsls	r2, r4, #8
 800556a:	68f9      	ldr	r1, [r7, #12]
 800556c:	6849      	ldr	r1, [r1, #4]
 800556e:	0849      	lsrs	r1, r1, #1
 8005570:	2000      	movs	r0, #0
 8005572:	4688      	mov	r8, r1
 8005574:	4681      	mov	r9, r0
 8005576:	eb12 0a08 	adds.w	sl, r2, r8
 800557a:	eb43 0b09 	adc.w	fp, r3, r9
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	603b      	str	r3, [r7, #0]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800558c:	4650      	mov	r0, sl
 800558e:	4659      	mov	r1, fp
 8005590:	f7fa fe1a 	bl	80001c8 <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4613      	mov	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055a2:	d308      	bcc.n	80055b6 <UART_SetConfig+0x3de>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055aa:	d204      	bcs.n	80055b6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	e0b6      	b.n	8005724 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055bc:	e0b2      	b.n	8005724 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055c6:	d15e      	bne.n	8005686 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80055c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d828      	bhi.n	8005622 <UART_SetConfig+0x44a>
 80055d0:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <UART_SetConfig+0x400>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055fd 	.word	0x080055fd
 80055dc:	08005605 	.word	0x08005605
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	08005623 	.word	0x08005623
 80055e8:	08005613 	.word	0x08005613
 80055ec:	08005623 	.word	0x08005623
 80055f0:	08005623 	.word	0x08005623
 80055f4:	08005623 	.word	0x08005623
 80055f8:	0800561b 	.word	0x0800561b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055fc:	f7fd ff72 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 8005600:	61f8      	str	r0, [r7, #28]
        break;
 8005602:	e014      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005604:	f7fd ff84 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 8005608:	61f8      	str	r0, [r7, #28]
        break;
 800560a:	e010      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800560c:	4b4d      	ldr	r3, [pc, #308]	@ (8005744 <UART_SetConfig+0x56c>)
 800560e:	61fb      	str	r3, [r7, #28]
        break;
 8005610:	e00d      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005612:	f7fd fecf 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 8005616:	61f8      	str	r0, [r7, #28]
        break;
 8005618:	e009      	b.n	800562e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800561e:	61fb      	str	r3, [r7, #28]
        break;
 8005620:	e005      	b.n	800562e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800562c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d077      	beq.n	8005724 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	005a      	lsls	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	441a      	add	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	2b0f      	cmp	r3, #15
 800564e:	d916      	bls.n	800567e <UART_SetConfig+0x4a6>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005656:	d212      	bcs.n	800567e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f023 030f 	bic.w	r3, r3, #15
 8005660:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	b29b      	uxth	r3, r3
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	b29a      	uxth	r2, r3
 800566e:	8afb      	ldrh	r3, [r7, #22]
 8005670:	4313      	orrs	r3, r2
 8005672:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	8afa      	ldrh	r2, [r7, #22]
 800567a:	60da      	str	r2, [r3, #12]
 800567c:	e052      	b.n	8005724 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005684:	e04e      	b.n	8005724 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005686:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800568a:	2b08      	cmp	r3, #8
 800568c:	d827      	bhi.n	80056de <UART_SetConfig+0x506>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0x4bc>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056b9 	.word	0x080056b9
 8005698:	080056c1 	.word	0x080056c1
 800569c:	080056c9 	.word	0x080056c9
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056cf 	.word	0x080056cf
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056df 	.word	0x080056df
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b8:	f7fd ff14 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 80056bc:	61f8      	str	r0, [r7, #28]
        break;
 80056be:	e014      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7fd ff26 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005744 <UART_SetConfig+0x56c>)
 80056ca:	61fb      	str	r3, [r7, #28]
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7fd fe71 	bl	80033b4 <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056da:	61fb      	str	r3, [r7, #28]
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80056e8:	bf00      	nop
    }

    if (pclk != 0U)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d019      	beq.n	8005724 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	085a      	lsrs	r2, r3, #1
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005702:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d909      	bls.n	800571e <UART_SetConfig+0x546>
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005710:	d205      	bcs.n	800571e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60da      	str	r2, [r3, #12]
 800571c:	e002      	b.n	8005724 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005730:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005734:	4618      	mov	r0, r3
 8005736:	3728      	adds	r7, #40	@ 0x28
 8005738:	46bd      	mov	sp, r7
 800573a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573e:	bf00      	nop
 8005740:	40008000 	.word	0x40008000
 8005744:	00f42400 	.word	0x00f42400

08005748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00a      	beq.n	8005772 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00a      	beq.n	8005794 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01a      	beq.n	800585e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005846:	d10a      	bne.n	800585e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
  }
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b098      	sub	sp, #96	@ 0x60
 8005890:	af02      	add	r7, sp, #8
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800589c:	f7fc fd16 	bl	80022cc <HAL_GetTick>
 80058a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0308 	and.w	r3, r3, #8
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d12e      	bne.n	800590e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f88c 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d021      	beq.n	800590e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	e853 3f00 	ldrex	r3, [r3]
 80058d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058de:	653b      	str	r3, [r7, #80]	@ 0x50
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e6      	bne.n	80058ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e062      	b.n	80059d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b04      	cmp	r3, #4
 800591a:	d149      	bne.n	80059b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800591c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005924:	2200      	movs	r2, #0
 8005926:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f856 	bl	80059dc <UART_WaitOnFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d03c      	beq.n	80059b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	623b      	str	r3, [r7, #32]
   return(result);
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800594a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005954:	633b      	str	r3, [r7, #48]	@ 0x30
 8005956:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800595a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e6      	bne.n	8005936 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3308      	adds	r3, #8
 800596e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	60fb      	str	r3, [r7, #12]
   return(result);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3308      	adds	r3, #8
 8005986:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005988:	61fa      	str	r2, [r7, #28]
 800598a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	69b9      	ldr	r1, [r7, #24]
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	617b      	str	r3, [r7, #20]
   return(result);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e011      	b.n	80059d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3758      	adds	r7, #88	@ 0x58
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	603b      	str	r3, [r7, #0]
 80059e8:	4613      	mov	r3, r2
 80059ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ec:	e04f      	b.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059f4:	d04b      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059f6:	f7fc fc69 	bl	80022cc <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d302      	bcc.n	8005a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e04e      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d037      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b80      	cmp	r3, #128	@ 0x80
 8005a22:	d034      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b40      	cmp	r3, #64	@ 0x40
 8005a28:	d031      	beq.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d110      	bne.n	8005a5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f838 	bl	8005ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2208      	movs	r2, #8
 8005a4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e029      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a68:	d111      	bne.n	8005a8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f000 f81e 	bl	8005ab6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e00f      	b.n	8005aae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4013      	ands	r3, r2
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	bf0c      	ite	eq
 8005a9e:	2301      	moveq	r3, #1
 8005aa0:	2300      	movne	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d0a0      	beq.n	80059ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b095      	sub	sp, #84	@ 0x54
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac6:	e853 3f00 	ldrex	r3, [r3]
 8005aca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005adc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ade:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ae2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e6      	bne.n	8005abe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b10:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d118      	bne.n	8005b5e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f023 0310 	bic.w	r3, r3, #16
 8005b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6979      	ldr	r1, [r7, #20]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	613b      	str	r3, [r7, #16]
   return(result);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e6      	bne.n	8005b2c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b72:	bf00      	nop
 8005b74:	3754      	adds	r7, #84	@ 0x54
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <memset>:
 8005b7e:	4402      	add	r2, r0
 8005b80:	4603      	mov	r3, r0
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d100      	bne.n	8005b88 <memset+0xa>
 8005b86:	4770      	bx	lr
 8005b88:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8c:	e7f9      	b.n	8005b82 <memset+0x4>
	...

08005b90 <__libc_init_array>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	4d0d      	ldr	r5, [pc, #52]	@ (8005bc8 <__libc_init_array+0x38>)
 8005b94:	4c0d      	ldr	r4, [pc, #52]	@ (8005bcc <__libc_init_array+0x3c>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	d109      	bne.n	8005bb4 <__libc_init_array+0x24>
 8005ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8005bd0 <__libc_init_array+0x40>)
 8005ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8005bd4 <__libc_init_array+0x44>)
 8005ba4:	f000 f818 	bl	8005bd8 <_init>
 8005ba8:	1b64      	subs	r4, r4, r5
 8005baa:	10a4      	asrs	r4, r4, #2
 8005bac:	2600      	movs	r6, #0
 8005bae:	42a6      	cmp	r6, r4
 8005bb0:	d105      	bne.n	8005bbe <__libc_init_array+0x2e>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb8:	4798      	blx	r3
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7ee      	b.n	8005b9c <__libc_init_array+0xc>
 8005bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc2:	4798      	blx	r3
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	e7f2      	b.n	8005bae <__libc_init_array+0x1e>
 8005bc8:	08005fd4 	.word	0x08005fd4
 8005bcc:	08005fd4 	.word	0x08005fd4
 8005bd0:	08005fd4 	.word	0x08005fd4
 8005bd4:	08005fd8 	.word	0x08005fd8

08005bd8 <_init>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	bf00      	nop
 8005bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bde:	bc08      	pop	{r3}
 8005be0:	469e      	mov	lr, r3
 8005be2:	4770      	bx	lr

08005be4 <_fini>:
 8005be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be6:	bf00      	nop
 8005be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bea:	bc08      	pop	{r3}
 8005bec:	469e      	mov	lr, r3
 8005bee:	4770      	bx	lr
